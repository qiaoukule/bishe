2023-05-12 15:12:36.389 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 11104 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-05-12 15:12:36.392 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-05-12 15:12:39.322 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-05-12 15:12:39.327 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-05-12 15:12:39.396 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2023-05-12 15:12:39.801 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$bf3f24d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:39.942 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.083 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$e6433df1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.091 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.094 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.102 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7cb4cd20] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.120 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e834cec9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.776 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$e0f9861d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.876 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.880 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.976 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.982 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$ce3c292f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.988 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:40.996 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$ba7d39ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:41.007 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:41.010 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:41.014 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-05-12 15:12:41.029 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-05-12 15:12:41.713 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-05-12 15:12:41.713 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-05-12 15:12:41.713 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-05-12 15:12:41.713 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-05-12 15:12:41.713 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:41.728 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:41.736 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.723 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.730 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.734 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.737 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.761 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.762 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.768 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.769 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.770 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.810 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.831 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.869 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.870 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.873 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.898 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.900 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.934 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.935 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.938 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.964 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.965 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.967 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.979 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:42.999 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$d8484cb1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.004 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$8a950eca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.008 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$45abf4b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.014 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.016 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.022 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$6c776be7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.027 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.030 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$ba53ea40] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.043 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.045 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.051 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.053 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.076 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.094 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.099 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.101 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.117 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.135 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-05-12 15:12:43.543 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-05-12 15:12:43.555 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-05-12 15:12:43.560 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-05-12 15:12:43.560 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-05-12 15:12:43.566 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-05-12 15:12:44.001 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-05-12 15:12:44.001 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 7558 ms
2023-05-12 15:12:44.583 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-05-12 15:12:44.584 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-05-12 15:12:44.584 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-05-12 15:12:44.584 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-05-12 15:12:44.584 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-05-12 15:12:44.584 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-05-12 15:12:44.584 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-05-12 15:12:44.584 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-05-12 15:12:45.249 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-05-12 15:12:45.259 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-05-12 15:12:45.259 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-05-12 15:12:45.263 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-05-12 15:12:45.264 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-05-12 15:12:45.266 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51683875565250'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-05-12 15:12:45.266 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-05-12 15:12:45.266 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-05-12 15:12:45.268 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5908e6d6
2023-05-12 15:12:45.415 febs [main] INFO  p6spy - 2023-05-12 15:12:45 | 耗时 94 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-05-12 15:12:47.171 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-05-12 15:12:52.201 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-05-12 15:12:52.272 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-05-12 15:12:52.360 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-05-12 15:12:52.377 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-05-12 15:12:52.396 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 15:12:52.397 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-05-12 15:12:52.418 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-05-12 15:12:52.421 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 16.732 seconds (JVM running for 22.856)
2023-05-12 15:12:52.434 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-05-12 15:12:52.436 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-05-12 15:12:52.436 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-05-12 15:12:52.502 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 18 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-05-12 15:12:52.548 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 41 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.625 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-05-12 15:12:52.659 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 21 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.684 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 11 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-05-12 15:12:52.690 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.694 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-05-12 15:12:52.697 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.702 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-05-12 15:12:52.706 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.709 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-05-12 15:12:52.712 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.716 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-05-12 15:12:52.720 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.725 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-05-12 15:12:52.728 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.730 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-05-12 15:12:52.734 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.738 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-05-12 15:12:52.741 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.743 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-05-12 15:12:52.745 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.748 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-05-12 15:12:52.751 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.752 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-05-12 15:12:52.755 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.758 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油';
2023-05-12 15:12:52.761 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.762 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-05-12 15:12:52.767 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '万富QQ' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:12:52.771 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '万富QQ';
2023-05-12 15:12:52.774 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '万富QQ' and m.perms is not null and m.perms <> '';
2023-05-12 15:12:52.776 febs [main] INFO  p6spy - 2023-05-12 15:12:52 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='17' ;
2023-05-12 15:12:52.777 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-05-12 15:12:52.777 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-05-12 15:12:52.777 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-05-12 15:12:52.777 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-05-12 15:12:52.778 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-05-12T15:12:52.777
2023-05-12 15:12:53.354 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-05-12 15:12:53.354 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-05-12 15:12:53.367 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 13 ms
2023-05-12 15:12:53.374 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-05-12 15:12:53.406 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-05-12 15:12:53.406 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51683438713507"'s failed in-progress jobs.
2023-05-12 15:12:53.414 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51683875565250 started.
2023-05-12 15:12:53.671 febs [RMI TCP Connection(5)-192.168.56.1] INFO  p6spy - 2023-05-12 15:12:53 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-05-12 15:25:47.765 febs [http-nio-9527-exec-1] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-05-12 15:25:48.088 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 7 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-05-12T15:25:48.013+0800' WHERE username = 'fank';
2023-05-12 15:25:48.099 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 15:25:48.183 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 24 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-05-12T15:25:48.123+0800', '', '127.0.0.1' );
2023-05-12 15:25:48.433 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 15:25:48.490 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 7 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-05-12 15:25:48.816 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 15:25:48.826 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 15:25:48.847 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 15 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 15:25:48.855 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 5 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 15:25:48.859 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 15:25:48.865 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 3 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 15:25:48.873 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-05-12 15:25:48.878 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 27 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-05-12 15:25:48.898 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 15 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-05-12 15:25:48.930 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 28 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-05-12 15:25:48.967 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 19 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 15:25:48.978 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-05-12 15:25:48.982 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-05-12 15:25:49.009 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:49 | 耗时 14 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-05-12 15:25:49.012 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 15:25:49 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-05-12 15:25:56.185 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 15:25:56.185 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 15:25:56.222 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 15:25:56 | 耗时 10 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-05-12 15:25:56.326 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 15:25:56 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM repair_info ri LEFT JOIN t_user tu ON (tu.USER_ID = ri.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) LEFT JOIN houses_info hi ON (hi.id = ri.houses_id) LEFT JOIN worker_info wi ON (wi.id = ri.worker) WHERE 1 = 1;
2023-05-12 15:25:56.335 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 15:25:56 | 耗时 1 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 ORDER BY ri.create_date LIMIT 0,10;
2023-05-12 16:12:52.417 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 17:12:52.415 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 21:00:07.100 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 21:00:07.132 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 21:00:07.134 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 21:12:33.648 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 22:11:57.205 febs [http-nio-9527-exec-6] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-05-12 22:11:57.360 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 15 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-05-12T22:11:57.281+0800' WHERE username = '荍荍加油';
2023-05-12 22:11:57.373 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 8 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 22:11:57.434 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-05-12T22:11:57.392+0800', '', '127.0.0.1' );
2023-05-12 22:11:57.484 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 3 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-05-12 22:11:57.532 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:11:57.545 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-05-12 22:11:57.796 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:11:57.800 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:11:57.815 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 9 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:11:57.818 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:11:57.821 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:11:57.823 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:11:57.827 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:11:57.857 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:11:57.869 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:11:57.880 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 8 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:11:57.886 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:11:57.928 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:11:57 | 耗时 38 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:12:04.867 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:12:04.870 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:12:04.876 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:12:04 | 耗时 2 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-05-12 22:12:04.886 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:12:04 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-05-12 22:12:05.773 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:12:05.777 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:12:05.782 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:12:05.783 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:12:05.784 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:12:05.785 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:12:05.787 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:12:05.788 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:12:05.790 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:12:05.793 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:12:05.796 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:12:05.799 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:12:05 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:12:33.654 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-05-12 22:15:22.704 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:15:22.709 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:15:22 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:15:22.710 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:15:23.433 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:15:23.434 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:15:23.435 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:15:23.436 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:15:23.438 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:15:23.438 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:15:23.441 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:15:23.443 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:15:23.444 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:15:23 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:15:45.366 febs [http-nio-9527-exec-7] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-05-12 22:15:45.379 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-05-12T22:15:45.371+0800' WHERE username = 'fank';
2023-05-12 22:15:45.382 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 22:15:45.418 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-05-12T22:15:45.393+0800', '', '127.0.0.1' );
2023-05-12 22:15:45.444 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:15:45.450 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-05-12 22:15:45.611 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:15:45.616 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:15:45.617 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-05-12 22:15:45.621 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-05-12 22:15:45.621 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:15:45.624 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:15:45.624 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-05-12 22:15:45.626 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:15:45.626 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:15:45.628 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:15:45.632 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-05-12 22:15:45.634 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-05-12 22:15:45.636 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-05-12 22:15:45.640 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-05-12 22:15:45.642 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:15:45 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-05-12 22:16:19.907 febs [http-nio-9527-exec-10] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-05-12 22:16:19.912 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:16:19 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-05-12T22:16:19.908+0800' WHERE username = '荍荍加油';
2023-05-12 22:16:19.914 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:16:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-05-12 22:16:19.922 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:16:19 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-05-12T22:16:19.919+0800', '', '127.0.0.1' );
2023-05-12 22:16:19.933 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:16:19 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-05-12 22:16:19.951 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:16:19.955 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:16:19 | 耗时 0 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-05-12 22:16:20.124 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:16:20.128 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:16:20.131 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:16:20.136 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:16:20.137 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:16:20.139 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:16:20.140 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 2 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:16:20.141 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:16:20.143 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:16:20.144 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:16:20.148 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 2 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:16:20.149 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:16:20 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:16:43.839 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:16:43.841 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:16:43.844 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:16:43.846 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:16:43.847 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:16:43.850 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:16:43.851 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:16:43.852 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:16:43.854 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:16:43.855 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:16:43.856 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:16:43.859 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:16:43 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:18:32.819 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:18:32.819 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:18:32.852 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:18:32.852 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:18:32.855 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:18:32.857 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:18:32.859 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:18:32.860 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:18:32.861 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:18:32.864 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:18:32.864 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:18:32.868 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-05-12 22:18:32 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:18:59.840 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:18:59.840 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:18:59.849 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:18:59.850 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:18:59.854 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:18:59.856 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:18:59.857 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:18:59.858 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:18:59.861 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:18:59.861 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:18:59.867 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:18:59.870 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:18:59 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:19:06.000 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:19:06.003 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:19:06.009 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:19:06.012 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:19:06.015 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:19:06.016 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:19:06.021 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 3 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:19:06.022 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:19:06.025 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:19:06.026 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:19:06.032 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:19:06.032 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:19:06 | 耗时 2 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:20:55.694 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:20:55.695 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:20:55.700 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:20:55.703 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:20:55.704 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:20:55.705 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:20:55.708 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:20:55.708 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:20:55.709 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:20:55.710 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:20:55.712 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:20:55.713 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:20:55 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:21:02.823 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:21:02.830 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:21:02.835 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:21:02.840 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:21:02.841 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:21:02.845 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:21:02.847 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 2 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:21:02.849 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:21:02.854 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:21:02.855 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:21:02.858 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:21:02.858 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-05-12 22:21:02 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:21:14.394 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:21:14.410 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:21:14.417 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:21:14.422 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:21:14.423 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:21:14.426 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:21:14.434 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 5 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:21:14.434 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 4 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:21:14.440 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:21:14.444 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:21:14.448 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:21:14.453 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:21:14 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:23:16.861 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:23:16.861 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:23:16.868 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:23:16.868 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:23:16.871 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:23:16.872 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:23:16.873 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:23:16.874 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:23:16.875 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:23:16.876 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:23:16.876 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:23:16.879 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:16 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:23:22.537 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:23:22.538 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:23:22.543 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:23:22.546 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:23:22.550 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:23:22.553 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:23:22.558 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 2 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:23:22.559 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 16 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:23:22.562 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:23:22.566 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:23:22.570 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:23:22.573 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-05-12 22:23:22 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:23:32.946 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:23:32.948 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-05-12 22:23:32.971 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-05-12 22:23:32.974 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 5 ms | SQL 语句：
select count(1) from t_login_log;
2023-05-12 22:23:32.977 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-05-12 22:23:32.977 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:23:32.980 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-05-12 22:23:32.985 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-05-12 22:23:32.986 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 5 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-05-12 22:23:32.989 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-05-12 22:23:32.989 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-05-12 22:23:32.995 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-05-12 22:23:32 | 耗时 2 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-05-12 22:25:00.792 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51683875565250 paused.
2023-05-12 22:25:00.804 febs [Thread-35] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-05-12 22:25:00.913 febs [Thread-35] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-05-12 22:25:00.914 febs [Thread-35] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-05-12 22:25:00.914 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51683875565250 shutting down.
2023-05-12 22:25:00.914 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51683875565250 paused.
2023-05-12 22:25:00.919 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51683875565250 shutdown complete.
2023-05-12 22:25:00.933 febs [Thread-35] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-05-12 22:25:00.939 febs [Thread-35] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-05-12 22:25:00.952 febs [Thread-35] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
