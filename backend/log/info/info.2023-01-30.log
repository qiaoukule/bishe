2023-01-30 11:33:21.575 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 24600 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-01-30 11:33:21.579 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-01-30 11:33:23.686 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-01-30 11:33:23.689 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-01-30 11:33:23.741 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 39ms. Found 0 repository interfaces.
2023-01-30 11:33:24.018 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$d8277e3e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.125 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.205 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b276c9e2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.212 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.215 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.221 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$48e85911] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.250 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$b4685aba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.695 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$ad2d120e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.714 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.718 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.893 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.899 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$9a6fb520] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.902 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.908 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$86b0c5ab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.918 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.920 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:24.925 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-01-30 11:33:24.937 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-01-30 11:33:25.358 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-01-30 11:33:25.358 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-01-30 11:33:25.359 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-01-30 11:33:25.359 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-01-30 11:33:25.359 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:25.368 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:25.375 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.105 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.111 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.114 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.116 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.133 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.134 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.140 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.140 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.142 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.175 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.191 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.213 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.215 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.218 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.243 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.243 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.267 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.268 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.271 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.290 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.291 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.292 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.304 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.323 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$a47bd8a2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.326 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$56c89abb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.329 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$11df80aa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.335 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.337 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.342 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$38aaf7d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.347 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.350 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$86877631] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.360 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.361 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.366 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.369 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.388 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.400 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.404 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.405 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.412 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.425 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 11:33:26.749 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-01-30 11:33:26.764 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-01-30 11:33:26.770 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-01-30 11:33:26.771 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-01-30 11:33:26.775 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-01-30 11:33:27.097 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-01-30 11:33:27.097 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5467 ms
2023-01-30 11:33:27.537 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-01-30 11:33:27.538 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-01-30 11:33:27.538 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-01-30 11:33:27.538 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-01-30 11:33:27.538 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-01-30 11:33:27.538 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-01-30 11:33:27.538 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-01-30 11:33:27.538 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-01-30 11:33:27.990 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-01-30 11:33:28.003 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-01-30 11:33:28.004 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-01-30 11:33:28.008 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-01-30 11:33:28.009 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-01-30 11:33:28.010 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51675049607992'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-01-30 11:33:28.010 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-01-30 11:33:28.010 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-01-30 11:33:28.012 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@8ac12e6
2023-01-30 11:33:28.090 febs [main] INFO  p6spy - 2023-01-30 11:33:28 | 耗时 29 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-01-30 11:33:28.682 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-01-30 11:33:30.565 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-01-30 11:33:30.626 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-01-30 11:33:30.706 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-01-30 11:33:30.721 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-01-30 11:33:30.738 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 11:33:30.743 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-01-30 11:33:30.758 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-01-30 11:33:30.760 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 9.662 seconds (JVM running for 14.813)
2023-01-30 11:33:30.768 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-01-30 11:33:30.769 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-01-30 11:33:30.769 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-01-30 11:33:30.804 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 5 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-01-30 11:33:30.821 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 11 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 11:33:30.900 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-01-30 11:33:30.918 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 3 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-01-30 11:33:30.931 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-01-30 11:33:30.936 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 11:33:30.938 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-01-30 11:33:30.941 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-01-30 11:33:30.944 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-01-30 11:33:30.946 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 11:33:30.949 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-01-30 11:33:30.951 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-01-30 11:33:30.954 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-01-30 11:33:30.956 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 11:33:30.965 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-01-30 11:33:30.973 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 3 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-01-30 11:33:30.975 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-01-30 11:33:30.978 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 11:33:30.982 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-01-30 11:33:30.984 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-01-30 11:33:30.986 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-01-30 11:33:30.988 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 11:33:30.993 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-01-30 11:33:30.997 febs [main] INFO  p6spy - 2023-01-30 11:33:30 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-01-30 11:33:31.000 febs [main] INFO  p6spy - 2023-01-30 11:33:31 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-01-30 11:33:31.002 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-01-30 11:33:31.002 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-01-30 11:33:31.002 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-01-30 11:33:31.002 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-01-30 11:33:31.002 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-01-30T11:33:31.002
2023-01-30 11:33:31.715 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-01-30 11:33:31.735 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-01-30 11:33:31.735 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51674997344179"'s failed in-progress jobs.
2023-01-30 11:33:31.744 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675049607992 started.
2023-01-30 11:33:32.973 febs [RMI TCP Connection(7)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-01-30 11:33:32.973 febs [RMI TCP Connection(7)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-01-30 11:33:32.980 febs [RMI TCP Connection(8)-192.168.56.1] INFO  p6spy - 2023-01-30 11:33:32 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-01-30 11:33:32.984 febs [RMI TCP Connection(7)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 11 ms
2023-01-30 11:37:08.373 febs [http-nio-9527-exec-2] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 11:37:08.615 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 11:37:08 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T11:37:08.562+0800' WHERE username = 'admin';
2023-01-30 11:37:08.619 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 11:37:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 11:37:08.663 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 11:37:08 | 耗时 4 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T11:37:08.641+0800', '', '127.0.0.1' );
2023-01-30 11:37:08.861 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 11:37:08.901 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 11:37:08 | 耗时 2 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 11:37:09.333 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 11:37:09.336 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 11:37:09.347 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 6 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 11:37:09.351 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 11:37:09.354 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 11:37:09.357 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 11:37:09.360 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 11:37:09.362 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 4 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 11:37:09.368 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 11:37:09.373 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 2 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 11:37:09.386 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 11:37:09.395 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 3 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 11:37:09.398 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 11:37:09 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 11:37:35.302 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 11:37:35.408 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 11:37:35 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 11:37:35.416 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 11:37:35 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 12:02:17.746 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:02:17.848 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 12:02:17 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM bulletin_info bi WHERE 1 = 1;
2023-01-30 12:02:17.853 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 12:02:17 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.title, bi.content, bi.date, bi.images, bi.publisher FROM bulletin_info bi WHERE 1 = 1 ORDER BY bi.date LIMIT 0,10;
2023-01-30 12:02:29.682 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:02:29.683 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:02:29.755 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 12:02:29 | 耗时 4 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 12:02:29.756 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 12:02:29 | 耗时 9 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 12:02:29.757 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 12:02:29 | 耗时 0 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 12:02:49.096 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:02:49.103 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:02:49.106 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 12:02:49 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 12:02:49.110 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 12:02:49 | 耗时 1 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 12:02:49.121 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 12:02:49 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 12:03:07.416 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:03:07.446 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 12:03:07 | 耗时 8 ms | SQL 语句：
UPDATE daily_manage SET type=1, content='小米笔记本用了还不到一年就充不上电了，redmibook14真的是弟中之弟，用了还不到一年妈的充电都冲不上了，我看谁tm买小米', images='})P2X@3L(0VTAUH1{`J2Q(2.png', read_status=1 WHERE ID=2;
2023-01-30 12:03:07.509 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:03:07.525 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 12:03:07 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 12:03:07.530 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 12:03:07 | 耗时 3 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 12:03:15.000 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:03:15.005 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 12:03:15 | 耗时 0 ms | SQL 语句：
UPDATE daily_manage SET type=1, content='小米笔记本用了还不到一年就充不上电了，redmibook14真的是弟中之弟，用了还不到一年妈的充电都冲不上了，我看谁tm买小米', read_status=1 WHERE ID=2;
2023-01-30 12:03:15.066 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:03:15.073 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 12:03:15 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 12:03:15.076 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 12:03:15 | 耗时 1 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 12:03:42.053 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:03:42.062 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 12:03:42 | 耗时 5 ms | SQL 语句：
UPDATE daily_manage SET type=1, content='小米笔记本用了还不到一年就充不上电了，redmibook14真的是弟中之弟，用了还不到一年妈的充电都冲不上了，我看谁tm买小米', images='})P2X@3L(0VTAUH1{`J2Q(2.png', read_status=1, worker=3 WHERE ID=2;
2023-01-30 12:03:42.141 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:03:42.149 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 12:03:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 12:03:42.152 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 12:03:42 | 耗时 0 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 12:04:47.340 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:04:47.352 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 12:04:47 | 耗时 5 ms | SQL 语句：
UPDATE daily_manage SET type=1, content='本人于2022年3月在京东网购了2包10袋统一老坛酸菜方便面，前两天吃了一袋，第二天早上便拉肚子，口腔也不舒服，京东客服只赔偿购买金额，并不关闭店铺，和做出惩罚，因此我要求按照消费者食品安全法赔偿人民币1000元', images='SA1647500959500.JPG', read_status=2, worker=3 WHERE ID=1;
2023-01-30 12:04:47.437 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:04:47.443 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 12:04:47 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 12:04:47.445 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 12:04:47 | 耗时 1 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 12:05:01.424 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:05:01.467 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 12:05:01 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM epidemic_register er LEFT JOIN t_user tu ON (tu.USER_ID = er.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) WHERE 1 = 1;
2023-01-30 12:05:01.469 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 12:05:01 | 耗时 1 ms | SQL 语句：
SELECT er.id, er.user_id AS userId, er.temperature, er.code_status AS codeStatus, er.through_city AS throughCity, er.create_date AS createDate, oi.`name`, oi.phone FROM epidemic_register er LEFT JOIN t_user tu ON ( tu.USER_ID = er.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID) WHERE 1 = 1 ORDER BY er.create_date LIMIT 0,10;
2023-01-30 12:05:11.175 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:05:11.176 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:05:11.182 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:05:11.190 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 12:05:11 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 12:05:11.191 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 12:05:11.195 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 12:05:11 | 耗时 5 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-01-30 12:05:11.203 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 12:05:11 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-01-30 12:05:11.222 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 12:05:11 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 12:05:11.225 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 12:05:11 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 13:08:26.289 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 13:33:24.495 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 14:33:24.501 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 14:57:37.454 febs [http-nio-9527-exec-1] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 14:57:37.604 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 14:57:37 | 耗时 20 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T14:57:37.526+0800' WHERE username = 'admin';
2023-01-30 14:57:37.623 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 14:57:37 | 耗时 14 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 14:57:37.720 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 14:57:37 | 耗时 4 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T14:57:37.642+0800', '', '127.0.0.1' );
2023-01-30 14:57:37.872 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:57:37.893 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 14:57:37 | 耗时 6 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 14:57:39.307 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:57:39.322 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:57:39.352 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 25 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 14:57:39.364 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 15 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 14:57:39.369 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 10 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 14:57:39.371 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 14:57:39.374 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 14:57:39.378 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 14:57:39.383 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 8 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 14:57:39.383 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 14:57:39.396 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 4 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 14:57:39.424 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 18 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 14:57:39.429 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 14:57:39 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 14:57:45.345 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:57:45.374 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 14:57:45 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 14:57:45.377 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 14:57:45 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 14:58:32.296 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:58:32.332 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 14:58:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', 'A', '%');
2023-01-30 14:58:32.335 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 14:58:32 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%','A','%') ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 14:58:37.621 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:58:37.626 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 14:58:37 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', 'A24', '%');
2023-01-30 14:58:42.237 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:58:42.245 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 14:58:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', 'A2', '%');
2023-01-30 14:58:45.800 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:58:45.805 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 14:58:45 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', 'A', '%');
2023-01-30 14:58:45.807 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 14:58:45 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%','A','%') ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 14:58:53.081 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 14:58:53.092 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 14:58:53 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', 'A区', '%');
2023-01-30 14:58:53.093 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 14:58:53 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%','A区','%') ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 15:10:52.867 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:10:52.867 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:10:52.867 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:10:52.870 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:10:52.949 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:10:52 | 耗时 10 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-01-30 15:10:52.949 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 15:10:52 | 耗时 11 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-01-30 15:10:52.950 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 15:10:52 | 耗时 9 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 15:10:52.970 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:10:52 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 15:10:52.980 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:10:52 | 耗时 3 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 15:13:43.550 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:13:43.721 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 15:13:43 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 15:13:43.725 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 15:13:43 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 15:13:59.150 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:13:59.162 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:13:59 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 2;
2023-01-30 15:14:04.831 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:14:04.837 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:14:04 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 2;
2023-01-30 15:15:12.120 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:15:12.123 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:15:12.155 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 15:15:12 | 耗时 4 ms | SQL 语句：
SELECT ID,name,price,type,unit,create_date FROM property_item;
2023-01-30 15:15:12.169 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 15:15:12 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN payment_record pr ON (pr.payment_id = pm.id) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1;
2023-01-30 15:15:12.172 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 15:15:12 | 耗时 1 ms | SQL 语句：
SELECT pm.id, pm.houses_id AS housesId, pm.year, pm.month, pm.type, pm.price, pm.dosage, oi.name, oi.phone, oi.id_number AS idNumber, hi.address, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, pr.create_date AS createDate, pr.payment_type AS paymentType, pi.`name` AS propertyName, pi.price AS propertyPrice, pi.type AS propertyType, pi.unit AS propertyUnit FROM payment_manage pm LEFT JOIN houses_info hi ON ( hi.id = pm.houses_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN payment_record pr ON ( pr.payment_id = pm.id ) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1 LIMIT 0,10;
2023-01-30 15:15:31.467 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:15:31.489 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:15:31 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM property_item pi WHERE 1 = 1;
2023-01-30 15:15:31.492 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:15:31 | 耗时 1 ms | SQL 语句：
SELECT pi.id, pi.name, pi.price, pi.type, pi.unit, pi.create_date AS createDate FROM property_item pi WHERE 1 = 1 LIMIT 0,10;
2023-01-30 15:15:45.448 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:15:45.450 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:15:45.454 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:15:45 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-01-30 15:15:45.492 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 15:15:45 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM repair_info ri LEFT JOIN t_user tu ON (tu.USER_ID = ri.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) LEFT JOIN houses_info hi ON (hi.id = ri.houses_id) LEFT JOIN worker_info wi ON (wi.id = ri.worker) WHERE 1 = 1;
2023-01-30 15:15:45.494 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 15:15:45 | 耗时 2 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 ORDER BY ri.create_date LIMIT 0,10;
2023-01-30 15:16:03.406 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:16:03.425 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 15:16:03 | 耗时 4 ms | SQL 语句：
UPDATE repair_info SET code='ORD-1654212556', content='我家的水管坏了，一直在放水，堵不住，求帮助😭😭', images='SA1647500959501.jpg', repair_status=1, worker=1, create_date='2022-03-17 20:20:30' WHERE ID=1;
2023-01-30 15:16:03.472 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:16:03.477 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:16:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM repair_info ri LEFT JOIN t_user tu ON (tu.USER_ID = ri.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) LEFT JOIN houses_info hi ON (hi.id = ri.houses_id) LEFT JOIN worker_info wi ON (wi.id = ri.worker) WHERE 1 = 1;
2023-01-30 15:16:03.479 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:16:03 | 耗时 1 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 ORDER BY ri.create_date LIMIT 0,10;
2023-01-30 15:16:25.865 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:16:25.905 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:16:25 | 耗时 18 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-01-30 15:16:25.906 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:16:25 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-01-30 15:18:43.061 febs [http-nio-9527-exec-1] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 15:18:43.077 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T15:18:43.067+0800' WHERE username = 'fank';
2023-01-30 15:18:43.085 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 5 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 15:18:43.110 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-01-30T15:18:43.091+0800', '', '127.0.0.1' );
2023-01-30 15:18:43.136 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:18:43.144 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 5 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-01-30 15:18:43.355 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:18:43.356 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:18:43.365 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 15:18:43.369 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 15:18:43.372 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 15:18:43.374 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 15:18:43.379 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-01-30 15:18:43.398 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 14;
2023-01-30 15:18:43.406 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 1;
2023-01-30 15:18:43.412 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 3 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 1 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 2) AS on4;
2023-01-30 15:18:43.418 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 15:18:43.528 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:18:43 | 耗时 105 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 15:18:58.717 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:18:58.717 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:18:58.721 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:18:58 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-01-30 15:18:58.721 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 15:18:58 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 14;
2023-01-30 15:19:00.102 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:19:00.104 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:19:00.105 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 14;
2023-01-30 15:19:00.108 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 1;
2023-01-30 15:19:00.109 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 15:19:00.111 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 15:19:00.111 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 1 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 2) AS on4;
2023-01-30 15:19:00.112 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 15:19:00.113 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 15:19:00.116 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 15:19:00.117 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 15:19:00.117 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 15:19:00 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-01-30 15:32:07.939 febs [Thread-23] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675049607992 paused.
2023-01-30 15:32:07.983 febs [Thread-23] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-01-30 15:32:08.534 febs [Thread-23] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-01-30 15:32:08.534 febs [Thread-23] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-01-30 15:32:08.534 febs [Thread-23] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675049607992 shutting down.
2023-01-30 15:32:08.535 febs [Thread-23] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675049607992 paused.
2023-01-30 15:32:08.540 febs [Thread-23] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675049607992 shutdown complete.
2023-01-30 15:32:08.551 febs [Thread-23] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-01-30 15:32:08.556 febs [Thread-23] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-01-30 15:32:08.568 febs [Thread-23] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-01-30 15:32:21.217 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 11248 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-01-30 15:32:21.220 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-01-30 15:32:23.699 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-01-30 15:32:23.702 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-01-30 15:32:23.760 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 42ms. Found 0 repository interfaces.
2023-01-30 15:32:24.070 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$840ca863] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.189 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.278 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$5e5bf407] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.287 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.289 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.299 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f4cd8336] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.315 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$604d84df] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.787 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$59123c33] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.805 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:24.811 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.046 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.056 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$4654df45] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.059 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.067 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$3295efd0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.075 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.078 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.081 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-01-30 15:32:25.093 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-01-30 15:32:25.455 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-01-30 15:32:25.455 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-01-30 15:32:25.456 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-01-30 15:32:25.456 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-01-30 15:32:25.456 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.465 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:25.472 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.217 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.222 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.225 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.227 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.244 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.245 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.252 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.252 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.254 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.286 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.303 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.325 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.326 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.330 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.349 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.350 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.371 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.372 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.376 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.397 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.398 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.399 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.410 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.434 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$506102c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.439 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$2adc4e0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.442 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$bdc4aacf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.451 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.454 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.460 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$e49021fd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.465 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.471 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$326ca056] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.484 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.486 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.491 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.497 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.524 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.547 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.553 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.553 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.568 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.587 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 15:32:26.979 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-01-30 15:32:26.991 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-01-30 15:32:26.995 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-01-30 15:32:26.995 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-01-30 15:32:27.001 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-01-30 15:32:27.344 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-01-30 15:32:27.346 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6089 ms
2023-01-30 15:32:28.077 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-01-30 15:32:28.077 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-01-30 15:32:28.077 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-01-30 15:32:28.078 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-01-30 15:32:28.078 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-01-30 15:32:28.078 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-01-30 15:32:28.078 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-01-30 15:32:28.078 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-01-30 15:32:28.564 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-01-30 15:32:28.575 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-01-30 15:32:28.576 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-01-30 15:32:28.580 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-01-30 15:32:28.581 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-01-30 15:32:28.582 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51675063948565'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-01-30 15:32:28.582 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-01-30 15:32:28.582 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-01-30 15:32:28.583 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@18e4551
2023-01-30 15:32:28.633 febs [main] INFO  p6spy - 2023-01-30 15:32:28 | 耗时 6 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-01-30 15:32:29.148 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-01-30 15:32:30.312 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-01-30 15:32:30.361 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-01-30 15:32:30.440 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-01-30 15:32:30.458 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-01-30 15:32:30.492 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 15:32:30.519 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-01-30 15:32:30.553 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-01-30 15:32:30.555 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 9.831 seconds (JVM running for 15.136)
2023-01-30 15:32:30.566 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-01-30 15:32:30.567 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-01-30 15:32:30.567 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-01-30 15:32:30.612 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 17 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-01-30 15:32:30.639 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 23 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 15:32:30.714 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-01-30 15:32:30.727 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-01-30 15:32:30.740 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-01-30 15:32:30.744 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 15:32:30.748 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-01-30 15:32:30.751 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-01-30 15:32:30.754 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-01-30 15:32:30.757 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 15:32:30.760 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-01-30 15:32:30.763 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-01-30 15:32:30.767 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-01-30 15:32:30.769 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 15:32:30.772 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-01-30 15:32:30.775 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-01-30 15:32:30.776 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-01-30 15:32:30.780 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 15:32:30.783 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-01-30 15:32:30.786 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-01-30 15:32:30.787 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-01-30 15:32:30.790 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 15:32:30.795 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-01-30 15:32:30.799 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-01-30 15:32:30.800 febs [main] INFO  p6spy - 2023-01-30 15:32:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-01-30 15:32:30.801 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-01-30 15:32:30.801 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-01-30 15:32:30.801 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-01-30 15:32:30.801 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-01-30 15:32:30.801 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-01-30T15:32:30.801
2023-01-30 15:32:31.444 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-01-30 15:32:31.453 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-01-30 15:32:31.454 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51675049607992"'s failed in-progress jobs.
2023-01-30 15:32:31.460 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675063948565 started.
2023-01-30 15:32:31.541 febs [RMI TCP Connection(4)-192.168.56.1] INFO  p6spy - 2023-01-30 15:32:31 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-01-30 15:32:31.541 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-01-30 15:32:31.541 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-01-30 15:32:31.551 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 10 ms
2023-01-30 15:32:39.794 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:32:39.794 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:32:39.940 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 15:32:39 | 耗时 16 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 14;
2023-01-30 15:32:39.951 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 15:32:39 | 耗时 5 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 1;
2023-01-30 15:32:39.969 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 15:32:39 | 耗时 14 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 1 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 2) AS on4;
2023-01-30 15:32:39.980 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 15:32:39 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 15:32:39.992 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 15:32:39 | 耗时 7 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 15:32:40.057 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:32:40 | 耗时 49 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 15:32:40.062 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:32:40 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 15:32:40.066 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:32:40 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 15:32:40.071 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:32:40 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 15:32:40.075 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 15:32:40 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-01-30 15:33:18.070 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:33:18.077 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 15:33:18.099 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 15:33:18 | 耗时 7 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 15:33:18.168 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 15:33:18 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1 AND dm.user_id = 14;
2023-01-30 15:33:18.176 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 15:33:18 | 耗时 1 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 AND dm.user_id = 14 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 16:04:52.715 febs [http-nio-9527-exec-7] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 16:04:52.869 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:04:52 | 耗时 17 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T16:04:52.781+0800' WHERE username = 'admin';
2023-01-30 16:04:52.891 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:04:52 | 耗时 16 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 16:04:52.969 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:04:52 | 耗时 4 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T16:04:52.921+0800', '', '127.0.0.1' );
2023-01-30 16:04:53.076 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:04:53.139 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 9 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 16:04:53.586 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:04:53.588 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:04:53.626 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 35 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 16:04:53.626 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 22 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 16:04:53.633 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:04:53.636 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 4 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 16:04:53.637 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:04:53.642 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 16:04:53.644 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 4 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 16:04:53.648 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 16:04:53.654 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 4 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 16:04:53.676 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 13 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 16:04:53.682 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:04:53 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 16:05:00.452 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:05:00.502 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:05:00 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 16:05:00.506 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:05:00 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 16:07:26.744 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 16:07:26.759 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:07:26 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T16:07:26.747+0800' WHERE username = 'admin';
2023-01-30 16:07:26.762 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:07:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 16:07:26.775 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:07:26 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T16:07:26.768+0800', '', '127.0.0.1' );
2023-01-30 16:07:26.802 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:07:26.807 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:07:26 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 16:07:27.039 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:07:27.046 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 4 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 16:07:27.047 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:07:27.068 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 19 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 16:07:27.068 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 15 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 16:07:27.072 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:07:27.072 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 2 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 16:07:27.075 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:07:27.077 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 16:07:27.079 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 16:07:27.082 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 16:07:27.085 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 16:07:27.088 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:07:27 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 16:08:18.414 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 16:08:18.420 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T16:08:18.416+0800' WHERE username = 'admin';
2023-01-30 16:08:18.423 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 16:08:18.434 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T16:08:18.429+0800', '', '127.0.0.1' );
2023-01-30 16:08:18.458 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:18.462 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 16:08:18.720 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:18.723 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:18.726 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 16:08:18.729 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 16:08:18.730 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 16:08:18.733 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 16:08:18.734 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:08:18.735 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 16:08:18.737 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:08:18.740 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 16:08:18.742 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 16:08:18.744 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 16:08:18.748 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:08:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 16:08:22.951 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:22.985 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:08:22 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-01-30 16:08:22.987 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:08:22 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-01-30 16:08:32.259 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:32.268 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:08:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 16:08:32.271 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:08:32 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 16:08:48.906 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:49.037 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:08:49 | 耗时 6 ms | SQL 语句：
INSERT INTO owner_info ( name, phone, id_number, create_date ) VALUES ( '测试', '13265003298', '440', '2023-01-30 16:08:48' );
2023-01-30 16:08:49.081 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:49.088 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:08:49 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 16:08:49.089 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:08:49 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 16:08:57.914 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:08:57.925 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:08:57 | 耗时 2 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 3;
2023-01-30 16:09:10.292 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:09:10.307 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:09:10 | 耗时 0 ms | SQL 语句：
UPDATE owner_info SET name='测试', phone='13265003298', id_number='440' WHERE ID=3;
2023-01-30 16:09:10.348 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:09:10.355 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:09:10 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 16:09:10.357 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:09:10 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 16:09:15.947 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:09:15.952 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:09:15 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 3;
2023-01-30 16:09:24.560 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:09:24.564 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:09:24 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 2;
2023-01-30 16:11:17.944 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 16:11:17.958 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:11:17 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T16:11:17.948+0800' WHERE username = 'admin';
2023-01-30 16:11:17.962 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:11:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 16:11:17.976 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:11:17 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T16:11:17.969+0800', '', '127.0.0.1' );
2023-01-30 16:11:18.009 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:11:18.018 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 16:11:18.246 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:11:18.247 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:11:18.255 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 16:11:18.255 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 16:11:18.257 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:11:18.261 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:11:18.268 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 16:11:18.272 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 16:11:18.283 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 26 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 16:11:18.289 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 16:11:18.293 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 16:11:18.300 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 3 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 16:11:18.304 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:11:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 16:11:22.790 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:11:22.830 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:11:22 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:11:22.835 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:11:22 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:15:03.321 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:15:03.325 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:15:03.333 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:15:03 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 16:15:03.341 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:15:03 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 16:15:03.344 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:15:03 | 耗时 0 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 16:15:11.372 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:15:11.375 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:15:11.403 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:15:11 | 耗时 4 ms | SQL 语句：
SELECT ID,name,price,type,unit,create_date FROM property_item;
2023-01-30 16:15:11.422 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:15:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM payment_record pr LEFT JOIN payment_manage pm ON (pm.id = pr.payment_id) LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1;
2023-01-30 16:15:11.426 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:15:11 | 耗时 1 ms | SQL 语句：
SELECT pr.id, pr.create_date AS createDate, pr.payment_type AS paymentType, pm.`year`, pm.`month`, pm.type, pm.price, pm.dosage, oi.`name`, oi.phone, oi.id_number AS idNumber, hi.address, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, pi.`name` AS propertyName, pi.price AS propertyPrice, pi.type AS propertyType, pi.unit AS propertyUnit FROM payment_record pr LEFT JOIN payment_manage pm ON ( pm.id = pr.payment_id ) LEFT JOIN houses_info hi ON ( hi.id = pm.houses_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN property_item pi ON ( pi.id = pm.type ) WHERE 1 = 1 LIMIT 0,10;
2023-01-30 16:25:06.992 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:25:07.078 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:25:07 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:25:07.086 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:25:07 | 耗时 2 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:26:11.686 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:26:11.712 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:26:11 | 耗时 19 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:26:11.714 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:26:11 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:27:04.291 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:27:04.326 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:27:04.346 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:27:04.350 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:27:04.354 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:27:04 | 耗时 1 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-01-30 16:27:04.360 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:27:04 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 16:27:04.361 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 16:27:04 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-01-30 16:27:04.413 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:27:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 16:27:04.416 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:27:04 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 16:27:52.535 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:27:52.536 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:27:52.543 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 16:27:52.546 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 16:27:52.548 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 16:27:52.551 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 16:27:52.553 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 16:27:52.555 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:27:52.557 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 16:27:52.558 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 16:27:52.559 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 16:27:52.560 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 16:27:52.562 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:27:52 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 16:30:53.114 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:30:53.125 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:30:53 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:30:53.127 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:30:53 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:31:12.913 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:32:30.478 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 16:32:55.841 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:37:37.497 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:37:37.990 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:37:37 | 耗时 151 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:37:38.011 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:37:38 | 耗时 9 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:37:47.349 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:38:56.338 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:38:56.393 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:38:56 | 耗时 12 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期A区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', usage_area=12124.7, surface_area=13140.2, type=2, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:38:56.464 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:38:56.470 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:38:56 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:38:56.472 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 16:38:56 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:39:12.936 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:39:37.161 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:39:42.025 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:42:05.207 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:42:05.259 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:42:05 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:42:05.263 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:42:05 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:44:14.353 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:44:14.381 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:44:14 | 耗时 9 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期A区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', usage_area=12124.7, surface_area=13140.2, type=1, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:44:14.488 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:44:14.503 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:44:14 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:44:14.504 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:44:14 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:44:24.376 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:44:24.391 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:44:24 | 耗时 4 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期A区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', usage_area=12124.7, surface_area=13140.2, type=4, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:44:24.452 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:44:24.456 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:44:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:44:24.457 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:44:24 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:45:59.225 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:45:59.253 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:45:59 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:45:59.256 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:45:59 | 耗时 2 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:47:56.691 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:47:56.735 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:47:56 | 耗时 31 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:47:56.737 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:47:56 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:48:45.932 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:48:45.944 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:48:45 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:48:45.946 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:48:45 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:48:51.204 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:48:51.217 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:48:51 | 耗时 4 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期A区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', street='小红门', community='金浩苑', usage_area=12124.7, surface_area=13140.2, type=4, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:48:51.284 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:48:51.289 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:48:51 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:48:51.290 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:48:51 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:49:02.022 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:49:02.025 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:49:02 | 耗时 0 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期A区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', usage_area=12124.7, surface_area=13140.2, type=4, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:49:02.106 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:49:02.111 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 16:49:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:49:02.112 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 16:49:02 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:49:12.898 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:49:12.919 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:49:12 | 耗时 1 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期A区23栋', address='北京市朝阳区小红门鸿博家园一期A区23栋', usage_area=2958.2, surface_area=3399, type=2, rooms=204, units=10, layers=10, images='SA1647424830910.jpg,SA1647425946708.jpg' WHERE ID=1;
2023-01-30 16:49:13.065 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:49:13.069 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:49:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:49:13.071 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:49:13 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:52:47.154 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:52:47.256 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:52:47 | 耗时 11 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期A区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', usage_area=12124.7, surface_area=13140.2, type=4, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:52:47.341 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:52:47.409 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:52:47 | 耗时 51 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:52:47.421 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:52:47 | 耗时 3 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:53:19.604 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:53:19.615 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:53:19 | 耗时 5 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期B区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', usage_area=12124.7, surface_area=13140.2, type=4, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:53:19.691 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:53:19.713 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:53:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:53:19.715 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:53:19 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:54:56.404 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:54:56.411 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:54:56 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:54:56.415 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 16:54:56 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:55:14.023 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:55:14.029 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 16:55:14 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:55:14.031 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 16:55:14 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:55:40.900 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:55:40.948 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:55:40 | 耗时 42 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:55:40.950 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:55:40 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:56:01.010 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:56:01.017 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:56:01 | 耗时 3 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期B区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', street='小红门', community='金沙苑', usage_area=12124.7, surface_area=13140.2, type=4, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:56:01.099 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:56:01.106 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:56:01 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:56:01.108 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:56:01 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:56:07.382 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:56:07.406 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 16:56:07 | 耗时 3 ms | SQL 语句：
UPDATE building_info SET name='鸿博家园一期B区24栋', address='北京市朝阳区小红门鸿博家园一期A区24栋', community='金河苑', usage_area=12124.7, surface_area=13140.2, type=4, rooms=728, units=20, layers=15, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:56:07.460 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:56:07.465 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:56:07 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:56:07.467 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 16:56:07 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:57:16.239 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:57:16.253 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:57:16 | 耗时 5 ms | SQL 语句：
UPDATE building_info SET name='二座五梯', address='北京市朝阳区小红门鸿博家园一期A区24栋', community='金河苑', usage_area=12124.7, surface_area=13140.2, type=4, rooms=24, units=20, layers=6, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 16:57:16.320 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:57:16.324 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:57:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:57:16.326 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 16:57:16 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:58:08.574 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:58:08.591 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 16:58:08 | 耗时 12 ms | SQL 语句：
UPDATE building_info SET name='一座一梯', address='北京市朝阳区小红门鸿博家园一期A区23栋', community='金河苑', usage_area=2958.2, surface_area=3399, type=2, rooms=204, units=10, layers=10, images='SA1647424830910.jpg,SA1647425946708.jpg' WHERE ID=1;
2023-01-30 16:58:08.659 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:58:08.662 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:58:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:58:08.664 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:58:08 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:58:22.607 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:58:35.208 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:58:35.212 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:58:35 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.type = 2;
2023-01-30 16:58:35.215 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 16:58:35 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.type = 2 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:59:17.961 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:59:18.029 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:59:18 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 16:59:18.035 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 16:59:18 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 16:59:25.833 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:59:25.904 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 16:59:25 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.community LIKE CONCAT('%', '金沙苑', '%');
2023-01-30 16:59:28.977 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 16:59:28.982 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:59:28 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.community LIKE CONCAT('%', '金河苑', '%');
2023-01-30 16:59:29.429 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 16:59:29 | 耗时 26 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.community LIKE CONCAT('%','金河苑','%') ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:08:26.912 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:08:26.996 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:08:26 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 17:08:27.003 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:08:27 | 耗时 2 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:09:39.622 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:09:39.634 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:09:39 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', '二座', '%');
2023-01-30 17:09:39.636 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:09:39 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%','二座','%') ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:09:45.353 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:09:45.360 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:09:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', '二座', '%') AND bi.type = 1;
2023-01-30 17:09:48.933 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:09:48.941 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:09:48 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', '二座', '%') AND bi.type = 2;
2023-01-30 17:09:56.888 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:09:56.893 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:09:56 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%', '二座', '%');
2023-01-30 17:09:56.895 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:09:56 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.name LIKE CONCAT('%','二座','%') ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:10:01.208 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:10:01.218 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:10:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 17:10:01.221 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:10:01 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:13:00.307 febs [http-nio-9527-exec-6] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:13:00.432 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:13:00 | 耗时 21 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:13:00.357+0800' WHERE username = 'admin';
2023-01-30 17:13:00.481 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:13:00 | 耗时 44 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:13:00.560 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:13:00 | 耗时 5 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T17:13:00.496+0800', '', '127.0.0.1' );
2023-01-30 17:13:00.646 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:13:00.667 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:13:00 | 耗时 10 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 17:13:00.999 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:13:01.004 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:13:01.017 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 4 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:13:01.031 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 4 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:13:01.034 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:13:01.042 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 9 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:13:01.043 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 4 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:13:01.045 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 17:13:01.049 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:13:01.057 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 6 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:13:01.066 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 3 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:13:01.085 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 10 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:13:01.093 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:13:01 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:13:04.351 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:13:04.365 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:13:04 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 17:13:04.367 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:13:04 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:14:10.062 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:14:10.134 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:14:10 | 耗时 66 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 17:14:10.137 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:14:10 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:14:15.275 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:14:15.295 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:14:15 | 耗时 6 ms | SQL 语句：
UPDATE building_info SET name='二座五梯', address='北京市朝阳区小红门鸿博家园一期A区24栋', street='小红门', community='金河苑', usage_area=12124.7, surface_area=13140.2, type=1, rooms=24, units=20, layers=6, images='SA1647426086728.jpg' WHERE ID=2;
2023-01-30 17:14:15.361 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:14:15.366 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:14:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 17:14:15.367 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:14:15 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:14:23.554 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:14:23.563 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:14:23 | 耗时 0 ms | SQL 语句：
UPDATE building_info SET name='一座一梯', address='北京市朝阳区小红门鸿博家园一期A区23栋', street='小红门', community='金河苑', usage_area=2958.2, surface_area=3399, type=2, rooms=204, units=10, layers=10, images='SA1647424830910.jpg,SA1647425946708.jpg' WHERE ID=1;
2023-01-30 17:14:23.635 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:14:23.642 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:14:23 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 17:14:23.644 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:14:23 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:14:30.111 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:14:30.118 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:14:30 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1 AND bi.community LIKE CONCAT('%', '金河苑', '%') AND bi.type = 1;
2023-01-30 17:14:30.120 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:14:30 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 AND bi.community LIKE CONCAT('%','金河苑','%') AND bi.type = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:18:07.909 febs [http-nio-9527-exec-10] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:18:08.051 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 8 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:18:07.972+0800' WHERE username = 'admin';
2023-01-30 17:18:08.063 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 9 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:18:08.203 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T17:18:08.081+0800', '', '127.0.0.1' );
2023-01-30 17:18:08.280 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:18:08.296 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 4 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 17:18:08.715 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:18:08.715 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:18:08.735 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 15 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:18:08.742 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:18:08.744 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 9 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:18:08.745 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:18:08.747 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:18:08.750 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 17:18:08.775 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 28 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:18:08.781 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 2 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:18:08.788 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:18:08.799 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 6 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:18:08.804 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:18:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:18:18.189 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:18:18.219 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:18:18 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 17:18:18.224 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:18:18 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 17:18:42.700 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:18:42.708 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:18:42 | 耗时 0 ms | SQL 语句：
UPDATE owner_info SET name='测试', phone='13265003298', id_number='440' WHERE ID=3;
2023-01-30 17:18:42.758 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:18:42.769 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:18:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 17:18:42.770 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:18:42 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 17:18:58.270 febs [http-nio-9527-exec-8] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-01-30 17:18:58.972 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:18:58 | 耗时 6 ms | SQL 语句：
UPDATE owner_info SET images='SA1675070338904.jpg' WHERE ID = 3;
2023-01-30 17:18:59.015 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:18:59.035 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:18:59 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 17:18:59.038 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:18:59 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 17:19:02.616 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:19:02.621 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:19:02 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 3;
2023-01-30 17:19:05.979 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:19:05.982 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:19:05 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 2;
2023-01-30 17:19:32.107 febs [http-nio-9527-exec-8] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-01-30 17:19:45.838 febs [http-nio-9527-exec-1] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-01-30 17:20:03.949 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:20:03 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = 'cesh';
2023-01-30 17:20:03.983 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:20:03 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = 'ceshi';
2023-01-30 17:20:06.292 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:20:06 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = 'ceshi';
2023-01-30 17:20:09.531 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:20:09 | 耗时 4 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = 'cesh';
2023-01-30 17:20:16.487 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:20:16 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '荍荍加油';
2023-01-30 17:20:17.833 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:20:17 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '荍荍加油';
2023-01-30 17:20:30.082 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 3 ms | SQL 语句：
INSERT INTO t_user ( username, password, status, create_time, ssex, description, avatar ) VALUES ( '荍荍加油', 'e68bc94efa2eaab44d3d74f539ce48c7', '1', '2023-01-30T17:20:30.068+0800', '2', '注册用户', 'default.jpg' );
2023-01-30 17:20:30.090 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE name = '测试';
2023-01-30 17:20:30.099 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 1 ms | SQL 语句：
UPDATE owner_info SET user_id=16 WHERE ID = 3;
2023-01-30 17:20:30.103 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 0 ms | SQL 语句：
INSERT INTO t_user_role ( user_id, role_id ) VALUES ( 16, 75 );
2023-01-30 17:20:30.119 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 8 ms | SQL 语句：
INSERT INTO t_user_config ( USER_ID, theme, layout, multi_page, fix_siderbar, fix_header, color ) VALUES ( 16, 'light', 'head', '0', '1', '1', 'rgb(66, 185, 131)' );
2023-01-30 17:20:30.122 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:20:30.131 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油';
2023-01-30 17:20:30.135 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:20:30.137 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:20:30 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-01-30 17:20:55.216 febs [http-nio-9527-exec-2] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:20:55.275 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:20:55 | 耗时 10 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:20:55.217+0800' WHERE username = '荍荍加油';
2023-01-30 17:20:55.287 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:20:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:20:55.539 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:20:55 | 耗时 10 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-01-30T17:20:55.475+0800', '', '127.0.0.1' );
2023-01-30 17:20:55.686 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:20:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:20:55.708 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:20:55.713 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:20:55 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-01-30 17:20:55.998 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:20:56.002 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:20:56.006 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:20:56.012 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:20:56.013 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:20:56.015 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:20:56.017 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:20:56.021 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:20:56.024 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:20:56.025 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:20:56 | 耗时 9 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:21:33.818 febs [http-nio-9527-exec-9] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:21:33.827 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:21:33 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:21:33.821+0800' WHERE username = 'admin';
2023-01-30 17:21:33.829 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:21:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:21:33.843 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:21:33 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T17:21:33.834+0800', '', '127.0.0.1' );
2023-01-30 17:21:33.870 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:33.875 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:21:33 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 17:21:34.128 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:34.130 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:34.134 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:21:34.139 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:21:34.139 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:21:34.143 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:21:34.144 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:21:34.148 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:21:34.152 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:21:34.152 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 6 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:21:34.155 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 17:21:34.164 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 7 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:21:34.168 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:21:34 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:21:40.368 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:40.376 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:21:40 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 17:21:40.379 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:21:40 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 17:21:42.888 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:42.894 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:21:42 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 3;
2023-01-30 17:21:54.181 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:54.182 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:54.190 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:54.194 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:21:54 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-01-30 17:21:54.194 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:54.200 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:21:54 | 耗时 4 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-01-30 17:21:54.209 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:21:54 | 耗时 6 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 17:21:54.234 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:21:54 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 17:21:54.237 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:21:54 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 17:21:57.798 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:57.798 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:57.798 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:21:57.801 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:21:57 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-01-30 17:21:57.801 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:21:57 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-01-30 17:21:57.804 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:21:57 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 17:23:01.358 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:01.380 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:23:01 | 耗时 5 ms | SQL 语句：
INSERT INTO houses_info ( address, building_id, number, floor, usage_area, surface_area, nature, rooms, buyer, staff_id, owner_id, create_date ) VALUES ( '00000', 2, '402', 4, 156, 1160, 1, 5, '黄荍', 3, 3, '2023-01-30 17:23:01' );
2023-01-30 17:23:01.425 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:01.432 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:23:01 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 17:23:01.435 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:23:01 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 17:23:14.302 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:14.307 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:14 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 17:23:14.310 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:14 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 17:23:31.398 febs [http-nio-9527-exec-3] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:23:31.406 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:23:31.401+0800' WHERE username = '荍荍加油';
2023-01-30 17:23:31.413 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:23:31.428 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-01-30T17:23:31.419+0800', '', '127.0.0.1' );
2023-01-30 17:23:31.451 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:23:31.471 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:31.478 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-01-30 17:23:31.678 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:31.684 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:31.688 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:23:31.695 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:23:31.697 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 7 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:23:31.702 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:23:31.702 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 2 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:23:31.706 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:23:31.711 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:23:31.716 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:31 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:23:38.573 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:38.573 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:38.580 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:23:38 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-01-30 17:23:38.587 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:23:38 | 耗时 6 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-01-30 17:23:41.044 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:41.045 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:23:41.050 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:23:41.051 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:23:41.055 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:23:41.055 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:23:41.058 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:23:41.059 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 2 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:23:41.063 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:23:41.067 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:23:41 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:26:43.912 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:26:43.914 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:26:43.919 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:26:43.925 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:26:43.931 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:26:43.933 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:26:43.935 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:26:43.935 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:26:43.940 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:26:43.944 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:26:43 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:27:07.930 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:27:07.931 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:27:07.934 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:27:07.938 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:27:07.940 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:27:07.943 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:27:07.945 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:27:07.949 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:27:07.970 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:27:07.973 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:27:07 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:28:18.347 febs [http-nio-9527-exec-4] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:28:18.373 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:28:18.357+0800' WHERE username = 'admin';
2023-01-30 17:28:18.380 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:28:18.431 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T17:28:18.390+0800', '', '127.0.0.1' );
2023-01-30 17:28:18.485 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:18.497 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 3 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 17:28:18.827 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:18.833 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:18.835 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:28:18.839 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:28:18.839 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:28:18.844 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:28:18.845 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:28:18.849 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:28:18.852 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:28:18.855 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 17:28:18.855 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:28:18.866 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 3 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:28:18.871 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:28:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:28:21.937 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:21.968 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:28:21 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-01-30 17:28:21.973 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:28:21 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-01-30 17:28:24.446 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:24.458 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:28:24 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 17:28:24.461 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:28:24 | 耗时 2 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 17:28:31.717 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:31.717 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:31.721 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:31.722 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:28:31 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-01-30 17:28:31.723 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:31.750 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:28:31 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 17:28:31.768 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:28:31 | 耗时 27 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-01-30 17:28:31.777 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:28:31 | 耗时 6 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 17:28:31.789 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:28:31 | 耗时 6 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 17:28:40.823 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:40.854 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:28:40 | 耗时 5 ms | SQL 语句：
UPDATE houses_info SET address='00000', building_id=2, number='402', floor=4, usage_area=156, surface_area=1160, nature=1, rooms=5, buyer='荍', staff_id=3, owner_id=3 WHERE ID=4;
2023-01-30 17:28:40.934 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:28:40.940 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:28:40 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 17:28:40.944 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:28:40 | 耗时 2 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 17:29:03.850 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:29:03.860 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:29:03 | 耗时 4 ms | SQL 语句：
UPDATE houses_info SET address='00000', building_id=2, number='402', floor=4, usage_area=156, surface_area=1160, nature=1, rooms=5, buyer='乔', staff_id=3, owner_id=3 WHERE ID=4;
2023-01-30 17:29:03.955 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:29:03.964 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:29:03 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-01-30 17:29:03.966 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:29:03 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-01-30 17:31:57.424 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:31:57.436 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:31:57 | 耗时 4 ms | SQL 语句：
SELECT ID,name,price,type,unit,create_date FROM property_item;
2023-01-30 17:31:57.449 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:31:57.573 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:31:57 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN payment_record pr ON (pr.payment_id = pm.id) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1;
2023-01-30 17:31:57.575 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT pm.id, pm.houses_id AS housesId, pm.year, pm.month, pm.type, pm.price, pm.dosage, oi.name, oi.phone, oi.id_number AS idNumber, hi.address, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, pr.create_date AS createDate, pr.payment_type AS paymentType, pi.`name` AS propertyName, pi.price AS propertyPrice, pi.type AS propertyType, pi.unit AS propertyUnit FROM payment_manage pm LEFT JOIN houses_info hi ON ( hi.id = pm.houses_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN payment_record pr ON ( pr.payment_id = pm.id ) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1 LIMIT 0,10;
2023-01-30 17:32:04.829 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:04.830 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:04.833 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:32:04 | 耗时 0 ms | SQL 语句：
SELECT ID,name,price,type,unit,create_date FROM property_item;
2023-01-30 17:32:04.837 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:32:04 | 耗时 0 ms | SQL 语句：
SELECT ID,address,building_id,number,floor,usage_area,surface_area,nature,rooms,buyer,staff_id,owner_id,create_date FROM houses_info;
2023-01-30 17:32:07.613 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:07.628 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:32:07 | 耗时 4 ms | SQL 语句：
SELECT ci.* FROM consumption_info ci WHERE ci.houses_id = 4 AND DATE_FORMAT( concat( ci.`year`, '-', ci.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT( DATE_SUB( now(), INTERVAL 1 MONTH ), '%Y-%m');
2023-01-30 17:32:10.320 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:10.326 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:32:10 | 耗时 0 ms | SQL 语句：
SELECT ci.* FROM consumption_info ci WHERE ci.houses_id = 4 AND DATE_FORMAT( concat( ci.`year`, '-', ci.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT( now(), '%Y-%m');
2023-01-30 17:32:10.343 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:10.652 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:10.757 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:10.769 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:32:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN payment_record pr ON (pr.payment_id = pm.id) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1;
2023-01-30 17:32:10.771 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:32:10 | 耗时 1 ms | SQL 语句：
SELECT pm.id, pm.houses_id AS housesId, pm.year, pm.month, pm.type, pm.price, pm.dosage, oi.name, oi.phone, oi.id_number AS idNumber, hi.address, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, pr.create_date AS createDate, pr.payment_type AS paymentType, pi.`name` AS propertyName, pi.price AS propertyPrice, pi.type AS propertyType, pi.unit AS propertyUnit FROM payment_manage pm LEFT JOIN houses_info hi ON ( hi.id = pm.houses_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN payment_record pr ON ( pr.payment_id = pm.id ) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1 LIMIT 0,10;
2023-01-30 17:32:24.282 febs [http-nio-9527-exec-4] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:32:24.303 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:32:24.288+0800' WHERE username = '荍荍加油';
2023-01-30 17:32:24.313 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 7 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:32:24.346 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 3 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-01-30T17:32:24.322+0800', '', '127.0.0.1' );
2023-01-30 17:32:24.377 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 4 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:32:24.400 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:24.405 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-01-30 17:32:24.641 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:24.645 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:32:24.649 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:32:24.662 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:32:24.663 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 11 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:32:24.667 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:32:24.670 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:32:24.674 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 8 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:32:24.674 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:32:24.678 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:32:24.682 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:32:24.698 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:32:24 | 耗时 8 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 17:32:30.462 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 17:33:10.218 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:33:10.274 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:33:10 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:33:10.365 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:33:10 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2023-01-30 17:33:10.370 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:33:10 | 耗时 0 ms | SQL 语句：
SELECT JOB_ID,bean_name,method_name,params,cron_expression,status,remark,create_time FROM t_job ORDER BY create_time DESC LIMIT 0,10;
2023-01-30 17:33:44.401 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:33:44.414 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:33:44 | 耗时 3 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:33:48.960 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:33:48.971 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:33:48 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:33:48.986 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:33:48 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2023-01-30 17:33:48.988 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:33:48 | 耗时 0 ms | SQL 语句：
SELECT JOB_ID,bean_name,method_name,params,cron_expression,status,remark,create_time FROM t_job ORDER BY create_time DESC LIMIT 0,10;
2023-01-30 17:33:52.755 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:33:52.782 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:33:52 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:33:52.838 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:33:52 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_job_log;
2023-01-30 17:33:52.840 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:33:52 | 耗时 1 ms | SQL 语句：
SELECT LOG_ID,job_id,bean_name,method_name,params,status,error,times,create_time FROM t_job_log ORDER BY create_time DESC LIMIT 0,10;
2023-01-30 17:34:00.034 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:00.049 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:34:00 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:34:06.902 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:06.924 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:34:06 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:34:06.963 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:34:06 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2023-01-30 17:34:06.968 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:34:06 | 耗时 1 ms | SQL 语句：
SELECT ID,username,operation,time,method,params,ip,create_time,location FROM t_log ORDER BY create_time DESC LIMIT 0,10;
2023-01-30 17:34:12.208 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:15.174 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:15.174 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:18.176 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:18.176 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:21.182 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:21.186 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:24.171 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:24.173 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:27.174 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:27.175 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:30.179 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:30.181 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:33.182 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:33.185 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:36.171 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:36.172 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:39.181 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:39.182 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:42.175 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:42.176 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:45.174 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:45.175 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:48.172 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:48.172 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:51.178 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:51.179 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:54.175 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:54.182 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:57.177 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:34:57.180 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:00.183 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:00.191 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:03.186 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:03.187 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:06.179 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:06.180 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:09.177 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:09.178 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:12.178 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:12.180 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:15.191 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:15.192 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:18.171 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:18.175 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:21.183 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:21.190 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:24.486 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:24.486 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:27.491 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:27.491 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:30.479 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:30.481 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:33.487 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:33.491 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:36.493 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:36.495 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:39.491 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:39.492 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:42.481 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:42.486 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:45.494 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:45.496 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:48.491 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:48.496 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:51.484 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:51.485 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:54.494 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:54.495 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:57.484 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:35:57.487 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:00.498 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:00.501 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:03.499 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:03.499 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:06.489 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:06.491 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:09.494 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:09.496 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:12.508 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:12.511 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:15.480 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:15.481 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:18.484 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:18.486 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:21.490 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:21.490 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:24.478 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:24.480 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:27.481 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:27.482 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:30.492 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:30.493 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:33.488 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:33.488 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:36.495 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:36.496 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:39.499 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:39.503 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:42.499 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:42.500 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:45.491 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:45.500 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:48.175 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:48.176 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:51.182 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:51.182 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:54.478 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:54.482 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:57.486 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:36:57.486 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:00.486 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:00.488 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:03.491 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:03.495 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:06.491 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:06.492 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:09.493 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:09.494 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:12.484 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:12.489 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:15.489 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:15.489 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:18.492 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:18.498 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:21.503 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:21.504 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:24.479 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:24.481 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:27.495 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:27.495 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:30.495 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:30.496 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:33.494 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:33.495 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:36.194 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:36.194 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:38.705 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:38.717 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:37:38 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:37:38.722 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:37:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2023-01-30 17:37:38.722 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:37:38 | 耗时 0 ms | SQL 语句：
SELECT JOB_ID,bean_name,method_name,params,cron_expression,status,remark,create_time FROM t_job ORDER BY create_time DESC LIMIT 0,10;
2023-01-30 17:37:43.922 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:43.923 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:37:43.953 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:37:43 | 耗时 6 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:37:43.977 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:37:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u.STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME ) TOTAL;
2023-01-30 17:37:43.980 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:37:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 group by u.username, u.user_id, u.password, u.email, u.mobile, u. STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME ORDER BY userId ASC LIMIT 0,10;
2023-01-30 17:37:43.981 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:37:43 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID,parent_id,dept_name,order_num,create_time,modify_time FROM t_dept ORDER BY order_num ASC;
2023-01-30 17:38:42.362 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:38:42.375 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:38:42 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:38:42.380 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:38:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u.STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME ) TOTAL;
2023-01-30 17:38:42.384 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:38:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 group by u.username, u.user_id, u.password, u.email, u.mobile, u. STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME ORDER BY userId ASC LIMIT 0,10;
2023-01-30 17:38:49.820 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:38:52.789 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:38:52.793 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:38:55.798 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:38:55.808 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:38:55 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:38:55.814 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:38:55 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2023-01-30 17:38:55.818 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:38:55 | 耗时 0 ms | SQL 语句：
SELECT JOB_ID,bean_name,method_name,params,cron_expression,status,remark,create_time FROM t_job ORDER BY create_time DESC LIMIT 0,10;
2023-01-30 17:39:28.430 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:39:28.582 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:39:28 | 耗时 3 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:40:19.608 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:40:19.637 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:40:19 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_test;
2023-01-30 17:40:19.638 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:40:19 | 耗时 0 ms | SQL 语句：
SELECT field1,field2,field3,create_time FROM t_test LIMIT 0,10;
2023-01-30 17:40:23.905 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:40:23.914 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:40:23 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:40:48.778 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:40:48.791 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:40:48 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:40:48.795 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:40:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2023-01-30 17:40:48.798 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:40:48 | 耗时 1 ms | SQL 语句：
SELECT JOB_ID,bean_name,method_name,params,cron_expression,status,remark,create_time FROM t_job ORDER BY create_time DESC LIMIT 0,10;
2023-01-30 17:42:22.110 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:42:22.112 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:42:22.138 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 10 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:42:22.144 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:42:22.146 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:42:22.147 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:42:22.151 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:42:22.156 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:42:22.156 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:42:22.170 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 9 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:42:22.179 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:42:22.188 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:42:22 | 耗时 3 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 17:42:26.061 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:42:26.062 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:42:26.075 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:42:26.077 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:42:26.078 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:42:26.080 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:42:26.082 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:42:26.084 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:42:26.088 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:42:26.089 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 4 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:42:26.093 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:42:26.096 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:42:26 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 17:42:41.410 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:42:41.413 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:42:41.420 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:42:41.421 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:42:41.422 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:42:41.424 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:42:41.424 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:42:41.426 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:42:41.426 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:42:41.429 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:42:41.429 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:42:41.434 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:42:41 | 耗时 2 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 17:43:08.466 febs [http-nio-9527-exec-6] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:43:08.485 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:43:08 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:43:08.473+0800' WHERE username = 'admin';
2023-01-30 17:43:08.489 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:43:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:43:08.533 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:43:08 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T17:43:08.498+0800', '', '127.0.0.1' );
2023-01-30 17:43:08.815 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:43:08.821 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:43:08 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 17:43:09.078 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:43:09.082 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:43:09.084 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:43:09.087 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:43:09.087 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:43:09.089 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 0 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:43:09.090 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:43:09.091 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:43:09.092 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:43:09.095 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:43:09.099 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 17:43:09.102 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 8 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:43:09.106 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:43:09 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:43:16.523 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:43:16.539 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:43:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 17:43:16.541 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:43:16 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 17:43:32.337 febs [http-nio-9527-exec-8] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:43:32.354 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:43:32 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '测试';
2023-01-30 17:43:39.346 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 3 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:43:39.354 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:43:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '测试';
2023-01-30 17:43:47.248 febs [http-nio-9527-exec-6] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 4 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:43:47.259 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:43:47 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '测试';
2023-01-30 17:44:08.529 febs [http-nio-9527-exec-7] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:44:08.544 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:44:08.533+0800' WHERE username = 'admin';
2023-01-30 17:44:08.548 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:44:08.564 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T17:44:08.557+0800', '', '127.0.0.1' );
2023-01-30 17:44:08.590 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:08.594 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 17:44:08.864 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:08.869 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:08.870 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:44:08.873 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:44:08.874 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:44:08.875 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:44:08.877 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 0 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:44:08.878 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:44:08.880 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:44:08.881 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:44:08.887 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 17:44:08.889 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:44:08.894 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:44:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:44:12.759 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:12.767 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-01-30 17:44:12.771 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:12 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-01-30 17:44:25.970 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:44:25.976 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:25 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:44:25.972+0800' WHERE username = '荍荍加油';
2023-01-30 17:44:25.979 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:25 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:44:25.991 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:25 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-01-30T17:44:25.984+0800', '', '127.0.0.1' );
2023-01-30 17:44:26.012 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:44:26.029 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:26.034 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-01-30 17:44:26.276 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:26.278 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:26.286 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 8 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:44:26.287 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:44:26.289 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:44:26.290 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:44:26.292 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:44:26.292 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 0 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:44:26.294 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:44:26.295 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:44:26.298 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:44:26.306 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 7 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:44:26.308 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:44:26 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:44:49.526 febs [http-nio-9527-exec-6] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 3 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:44:49.531 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:44:49.527+0800' WHERE username = '荍荍加油';
2023-01-30 17:44:49.536 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:44:49.550 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-01-30T17:44:49.541+0800', '', '127.0.0.1' );
2023-01-30 17:44:49.567 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:44:49.582 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:49.587 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-01-30 17:44:49.772 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:49.777 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 17:44:49.779 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:44:49.783 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 17:44:49.787 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:44:49.787 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 2 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 17:44:49.789 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:44:49.789 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:44:49.792 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:44:49.794 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 17:44:49.795 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:44:49.798 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:44:49 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:45:06.524 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:45:06.529 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:45:06.534 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:45:06 | 耗时 4 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 17:45:06.546 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:45:06 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 17:45:06.548 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:45:06 | 耗时 0 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 17:46:25.110 febs [http-nio-9527-exec-9] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:46:25.119 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:46:25.112+0800' WHERE username = 'fank';
2023-01-30 17:46:25.121 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:46:25.134 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-01-30T17:46:25.126+0800', '', '127.0.0.1' );
2023-01-30 17:46:25.161 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:46:25.170 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 3 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-01-30 17:46:25.387 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:46:25.388 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:46:25.391 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 14;
2023-01-30 17:46:25.394 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:46:25.396 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 1;
2023-01-30 17:46:25.397 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:46:25.399 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 1 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 2) AS on4;
2023-01-30 17:46:25.400 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:46:25.402 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:46:25.402 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:46:25.406 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-01-30 17:46:25.406 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:46:25 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 17:46:31.615 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:46:31.617 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:46:31.621 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 14;
2023-01-30 17:46:31.623 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:46:31.625 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 1;
2023-01-30 17:46:31.626 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:46:31.627 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 1 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 1 AND pm.type = 2) AS on4;
2023-01-30 17:46:31.628 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:46:31.630 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:46:31.631 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:46:31.631 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 17:46:31.635 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:46:31 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-01-30 17:47:12.283 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:47:12.292 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:47:12.285+0800' WHERE username = '荍荍加油';
2023-01-30 17:47:12.295 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:47:12.307 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-01-30T17:47:12.300+0800', '', '127.0.0.1' );
2023-01-30 17:47:12.324 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 17:47:12.340 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:47:12.344 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-01-30 17:47:12.592 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:47:12.595 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:47:12.595 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:47:12.597 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:47:12.599 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:47:12.600 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:47:12.602 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:47:12.604 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:47:12.604 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:47:12.608 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:47:12.609 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 2 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:47:12.611 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 17:47:12.614 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:47:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:47:17.256 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:47:17.256 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:47:17.261 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:47:17 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-01-30 17:47:17.269 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:47:17 | 耗时 9 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-01-30 17:47:50.769 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:47:50.820 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:47:50 | 耗时 5 ms | SQL 语句：
INSERT INTO repair_info ( code, user_id, houses_id, content, repair_status, create_date ) VALUES ( 'ORD-1675072070796', 16, 4, '666', 0, '2023-01-30 17:47:50' );
2023-01-30 17:47:50.834 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:47:50.841 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:47:50 | 耗时 3 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-01-30 17:48:04.594 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:04.595 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:04.598 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:48:04 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 17:48:04.602 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:48:04 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1 AND dm.user_id = 16;
2023-01-30 17:48:31.217 febs [http-nio-9527-exec-9] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 17:48:31.227 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T17:48:31.222+0800' WHERE username = 'admin';
2023-01-30 17:48:31.232 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 17:48:31.247 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T17:48:31.239+0800', '', '127.0.0.1' );
2023-01-30 17:48:31.279 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:31.288 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 17:48:31.520 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:31.522 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:31.525 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 17:48:31.529 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 17:48:31.531 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 17:48:31.532 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 17:48:31.536 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 17:48:31.536 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:48:31.540 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 17:48:31.544 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 17:48:31.544 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 2 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 17:48:31.546 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 17:48:31.547 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:48:31 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 17:48:34.848 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:34.880 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:48:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM bulletin_info bi WHERE 1 = 1;
2023-01-30 17:48:34.881 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:48:34 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.title, bi.content, bi.date, bi.images, bi.publisher FROM bulletin_info bi WHERE 1 = 1 ORDER BY bi.date LIMIT 0,10;
2023-01-30 17:48:36.626 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:36.632 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:48:36 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-01-30 17:48:36.632 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:36.642 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:48:36 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM daily_manage dm LEFT JOIN t_user tu ON (tu.USER_ID = dm.user_id) LEFT JOIN worker_info wi ON (wi.id = dm.worker) WHERE 1 = 1;
2023-01-30 17:48:36.644 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:48:36 | 耗时 0 ms | SQL 语句：
SELECT dm.id, dm.type, dm.content, dm.images, dm.user_id AS userId, dm.create_date AS createDate, dm.read_status AS readStatus, dm.worker AS worker, tu.USERNAME AS userName, wi.`name` AS workerName, wi.phone, wi.image FROM daily_manage dm LEFT JOIN t_user tu ON ( tu.USER_ID = dm.user_id ) LEFT JOIN worker_info wi ON ( wi.id = dm.worker ) WHERE 1 = 1 ORDER BY dm.create_date DESC LIMIT 0,10;
2023-01-30 17:48:40.877 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:40.880 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:48:40.887 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:48:40 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-01-30 17:48:40.902 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:48:40 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM repair_info ri LEFT JOIN t_user tu ON (tu.USER_ID = ri.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) LEFT JOIN houses_info hi ON (hi.id = ri.houses_id) LEFT JOIN worker_info wi ON (wi.id = ri.worker) WHERE 1 = 1;
2023-01-30 17:48:40.906 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-01-30 17:48:40 | 耗时 2 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 ORDER BY ri.create_date LIMIT 0,10;
2023-01-30 17:49:10.225 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:49:10.241 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 17:49:10 | 耗时 5 ms | SQL 语句：
UPDATE repair_info SET code='ORD-1647650404705', content='约了朋友在家吃火锅，电磁炉上烧的水还没有开，啪一声，跳闸了，很是扫兴。手机好端端的充着电，啪一声，又跳闸了，很是无奈。什么事情都没有做，啪一声，又跳闸了，估计大家也是一脸懵。为什么配电箱里的开关总是跳闸', repair_status=1, worker=1, create_date='2022-03-19 08:40:04' WHERE ID=2;
2023-01-30 17:49:10.304 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:49:10.309 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:49:10 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM repair_info ri LEFT JOIN t_user tu ON (tu.USER_ID = ri.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) LEFT JOIN houses_info hi ON (hi.id = ri.houses_id) LEFT JOIN worker_info wi ON (wi.id = ri.worker) WHERE 1 = 1;
2023-01-30 17:49:10.311 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:49:10 | 耗时 1 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 ORDER BY ri.create_date LIMIT 0,10;
2023-01-30 17:49:18.624 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:49:18.633 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 17:49:18 | 耗时 4 ms | SQL 语句：
UPDATE repair_info SET code='ORD-1675072070796', content='666', repair_status=1, worker=1, create_date='2023-01-30 17:47:50' WHERE ID=3;
2023-01-30 17:49:18.701 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:49:18.710 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:49:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM repair_info ri LEFT JOIN t_user tu ON (tu.USER_ID = ri.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) LEFT JOIN houses_info hi ON (hi.id = ri.houses_id) LEFT JOIN worker_info wi ON (wi.id = ri.worker) WHERE 1 = 1;
2023-01-30 17:49:18.713 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:49:18 | 耗时 1 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 ORDER BY ri.create_date LIMIT 0,10;
2023-01-30 17:49:24.179 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:49:24.183 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:49:24 | 耗时 0 ms | SQL 语句：
UPDATE repair_info SET code='ORD-1675072070796', content='666', repair_status=1, worker=1, create_date='2023-01-30 17:47:50' WHERE ID=3;
2023-01-30 17:49:24.259 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:49:24.265 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:49:24 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM repair_info ri LEFT JOIN t_user tu ON (tu.USER_ID = ri.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) LEFT JOIN houses_info hi ON (hi.id = ri.houses_id) LEFT JOIN worker_info wi ON (wi.id = ri.worker) WHERE 1 = 1;
2023-01-30 17:49:24.269 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 17:49:24 | 耗时 2 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 ORDER BY ri.create_date LIMIT 0,10;
2023-01-30 17:50:27.648 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:50:27.695 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:50:27 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM epidemic_register er LEFT JOIN t_user tu ON (tu.USER_ID = er.user_id) LEFT JOIN owner_info oi ON (oi.user_id = tu.USER_ID) WHERE 1 = 1;
2023-01-30 17:50:27.698 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 17:50:27 | 耗时 1 ms | SQL 语句：
SELECT er.id, er.user_id AS userId, er.temperature, er.code_status AS codeStatus, er.through_city AS throughCity, er.create_date AS createDate, oi.`name`, oi.phone FROM epidemic_register er LEFT JOIN t_user tu ON ( tu.USER_ID = er.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID) WHERE 1 = 1 ORDER BY er.create_date LIMIT 0,10;
2023-01-30 17:50:37.926 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:50:37.955 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:50:37 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM property_item pi WHERE 1 = 1;
2023-01-30 17:50:37.957 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:50:37 | 耗时 1 ms | SQL 语句：
SELECT pi.id, pi.name, pi.price, pi.type, pi.unit, pi.create_date AS createDate FROM property_item pi WHERE 1 = 1 LIMIT 0,10;
2023-01-30 17:50:45.910 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:50:45.916 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:50:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-01-30 17:50:45.918 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 17:50:45 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-01-30 17:55:49.871 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:55:49.872 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:55:49.875 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 17:55:49 | 耗时 0 ms | SQL 语句：
SELECT ID,name,price,type,unit,create_date FROM property_item;
2023-01-30 17:55:49.880 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:55:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN payment_record pr ON (pr.payment_id = pm.id) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1;
2023-01-30 17:55:49.883 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-01-30 17:55:49 | 耗时 1 ms | SQL 语句：
SELECT pm.id, pm.houses_id AS housesId, pm.year, pm.month, pm.type, pm.price, pm.dosage, oi.name, oi.phone, oi.id_number AS idNumber, hi.address, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, pr.create_date AS createDate, pr.payment_type AS paymentType, pi.`name` AS propertyName, pi.price AS propertyPrice, pi.type AS propertyType, pi.unit AS propertyUnit FROM payment_manage pm LEFT JOIN houses_info hi ON ( hi.id = pm.houses_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN payment_record pr ON ( pr.payment_id = pm.id ) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1 LIMIT 0,10;
2023-01-30 17:56:04.792 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:56:04.794 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 17:56:04.798 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 17:56:04 | 耗时 1 ms | SQL 语句：
SELECT ID,name,price,type,unit,create_date FROM property_item;
2023-01-30 17:56:04.800 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:56:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM payment_record pr LEFT JOIN payment_manage pm ON (pm.id = pr.payment_id) LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN property_item pi ON (pi.id = pm.type) WHERE 1 = 1;
2023-01-30 17:56:04.805 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 17:56:04 | 耗时 2 ms | SQL 语句：
SELECT pr.id, pr.create_date AS createDate, pr.payment_type AS paymentType, pm.`year`, pm.`month`, pm.type, pm.price, pm.dosage, oi.`name`, oi.phone, oi.id_number AS idNumber, hi.address, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, pi.`name` AS propertyName, pi.price AS propertyPrice, pi.type AS propertyType, pi.unit AS propertyUnit FROM payment_record pr LEFT JOIN payment_manage pm ON ( pm.id = pr.payment_id ) LEFT JOIN houses_info hi ON ( hi.id = pm.houses_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN property_item pi ON ( pi.id = pm.type ) WHERE 1 = 1 LIMIT 0,10;
2023-01-30 18:08:21.358 febs [Thread-25] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675063948565 paused.
2023-01-30 18:08:21.370 febs [Thread-25] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-01-30 18:08:21.443 febs [Thread-25] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-01-30 18:08:21.444 febs [Thread-25] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-01-30 18:08:21.444 febs [Thread-25] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675063948565 shutting down.
2023-01-30 18:08:21.444 febs [Thread-25] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675063948565 paused.
2023-01-30 18:08:21.449 febs [Thread-25] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675063948565 shutdown complete.
2023-01-30 18:08:21.465 febs [Thread-25] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-01-30 18:08:21.470 febs [Thread-25] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-01-30 18:08:21.482 febs [Thread-25] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-01-30 20:30:30.935 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 16520 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-01-30 20:30:30.964 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-01-30 20:30:32.412 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-01-30 20:30:32.416 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-01-30 20:30:32.473 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41ms. Found 0 repository interfaces.
2023-01-30 20:30:32.766 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$f27019d5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:32.886 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:32.974 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$ccbf6579] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:32.981 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:32.984 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:32.994 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6330f4a8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.012 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$ceb0f651] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.343 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$c775ada5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.359 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.362 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.525 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.531 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$b4b850b7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.534 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.539 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$a0f96142] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.546 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.547 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.551 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-01-30 20:30:33.563 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-01-30 20:30:33.844 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-01-30 20:30:33.844 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-01-30 20:30:33.844 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-01-30 20:30:33.844 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-01-30 20:30:33.844 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.855 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:33.861 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.499 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.507 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.510 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.512 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.537 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.538 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.545 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.545 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.546 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.581 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.598 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.619 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.620 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.624 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.644 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.646 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.671 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.672 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.675 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.698 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.700 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.701 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.714 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.735 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$bec47439] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.740 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$71113652] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.743 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$2c281c41] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.750 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.752 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.760 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$52f3936f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.766 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.770 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$a0d011c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.780 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.782 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.787 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.790 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.812 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.827 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.832 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.832 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.841 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:34.864 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:30:35.267 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-01-30 20:30:35.279 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-01-30 20:30:35.283 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-01-30 20:30:35.283 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-01-30 20:30:35.288 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-01-30 20:30:35.406 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-01-30 20:30:35.406 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4321 ms
2023-01-30 20:30:35.885 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-01-30 20:30:35.886 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-01-30 20:30:35.886 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-01-30 20:30:35.886 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-01-30 20:30:35.886 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-01-30 20:30:35.886 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-01-30 20:30:35.886 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-01-30 20:30:35.886 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-01-30 20:30:36.481 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-01-30 20:30:36.493 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-01-30 20:30:36.493 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-01-30 20:30:36.496 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-01-30 20:30:36.498 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-01-30 20:30:36.498 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51675081836483'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-01-30 20:30:36.498 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-01-30 20:30:36.498 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-01-30 20:30:36.499 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1b3bec6c
2023-01-30 20:30:36.561 febs [main] INFO  p6spy - 2023-01-30 20:30:36 | 耗时 13 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-01-30 20:30:37.096 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-01-30 20:30:38.919 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-01-30 20:30:39.007 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-01-30 20:30:39.080 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-01-30 20:30:39.097 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-01-30 20:30:39.113 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 20:30:39.164 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-01-30 20:30:39.210 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-01-30 20:30:39.219 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 9.409 seconds (JVM running for 10.531)
2023-01-30 20:30:39.394 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-01-30 20:30:39.395 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-01-30 20:30:39.395 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-01-30 20:30:39.537 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 6 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-01-30 20:30:39.559 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 12 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:30:39.676 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-01-30 20:30:39.692 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 4 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-01-30 20:30:39.778 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 3 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-01-30 20:30:39.801 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:30:39.812 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 2 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-01-30 20:30:39.817 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-01-30 20:30:39.823 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-01-30 20:30:39.828 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:30:39.833 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-01-30 20:30:39.836 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-01-30 20:30:39.840 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-01-30 20:30:39.843 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:30:39.856 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 2 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-01-30 20:30:39.864 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-01-30 20:30:39.869 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-01-30 20:30:39.877 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:30:39.885 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 3 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-01-30 20:30:39.895 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 3 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-01-30 20:30:39.915 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 3 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-01-30 20:30:39.925 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:30:39.933 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-01-30 20:30:39.939 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-01-30 20:30:39.943 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-01-30 20:30:39.949 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:30:39.954 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油';
2023-01-30 20:30:39.967 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 20:30:39.972 febs [main] INFO  p6spy - 2023-01-30 20:30:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-01-30 20:30:39.976 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-01-30 20:30:39.976 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-01-30 20:30:39.976 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-01-30 20:30:39.976 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-01-30 20:30:39.977 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-01-30T20:30:39.976
2023-01-30 20:30:40.090 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-01-30 20:30:40.109 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-01-30 20:30:40.109 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51675063948565"'s failed in-progress jobs.
2023-01-30 20:30:40.126 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675081836483 started.
2023-01-30 20:30:40.788 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-01-30 20:30:40.788 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-01-30 20:30:40.791 febs [RMI TCP Connection(2)-192.168.56.1] INFO  p6spy - 2023-01-30 20:30:40 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-01-30 20:30:40.805 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 17 ms
2023-01-30 20:31:39.180 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 20:31:39.326 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T20:31:39.292+0800' WHERE username = 'admin';
2023-01-30 20:31:39.329 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:31:39.357 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 4 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T20:31:39.343+0800', '', '127.0.0.1' );
2023-01-30 20:31:39.492 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:31:39.529 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 3 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 20:31:39.957 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:31:39.961 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:31:39.982 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 16 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 20:31:39.987 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 20:31:39.990 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 20:31:39.996 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 20:31:40.000 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 20:31:40 | 耗时 23 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 20:31:40.000 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:31:39 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 20:31:40.006 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 20:31:40 | 耗时 4 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 20:31:40.013 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 20:31:40 | 耗时 3 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 20:31:40.024 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 20:31:40 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 20:31:40.034 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 20:31:40 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 20:31:40.036 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-01-30 20:31:40 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 20:34:18.852 febs [Thread-19] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675081836483 paused.
2023-01-30 20:34:18.882 febs [Thread-19] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-01-30 20:34:18.973 febs [Thread-19] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-01-30 20:34:18.974 febs [Thread-19] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-01-30 20:34:18.974 febs [Thread-19] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675081836483 shutting down.
2023-01-30 20:34:18.974 febs [Thread-19] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675081836483 paused.
2023-01-30 20:34:18.976 febs [Thread-19] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675081836483 shutdown complete.
2023-01-30 20:34:18.996 febs [Thread-19] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-01-30 20:34:19.001 febs [Thread-19] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-01-30 20:34:19.018 febs [Thread-19] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-01-30 20:34:30.203 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 20700 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-01-30 20:34:30.212 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-01-30 20:34:32.450 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-01-30 20:34:32.453 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-01-30 20:34:32.566 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80ms. Found 0 repository interfaces.
2023-01-30 20:34:33.180 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$6d9ffdae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:33.390 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:33.559 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$47ef4952] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:33.572 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:33.577 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:33.589 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$de60d881] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:33.619 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$49e0da2a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.181 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$42a5917e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.212 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.219 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.497 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.508 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$2fe83490] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.513 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.521 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$1c29451b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.535 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.537 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.545 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-01-30 20:34:34.561 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-01-30 20:34:34.976 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-01-30 20:34:34.977 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-01-30 20:34:34.977 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-01-30 20:34:34.977 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-01-30 20:34:34.977 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:34.996 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:35.009 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.208 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.222 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.227 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.231 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.272 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.273 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.289 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.290 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.294 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.398 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.427 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.459 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.462 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.466 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.505 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.507 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.576 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.580 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.596 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.647 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.649 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.651 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.675 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.712 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$39f45812] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.720 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$ec411a2b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.725 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$a758001a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.741 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.746 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.755 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$ce237748] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.769 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.773 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$1bfff5a1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.804 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.809 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.823 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.830 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.875 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.902 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.910 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.911 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.924 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:36.953 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-01-30 20:34:37.637 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-01-30 20:34:37.664 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-01-30 20:34:37.674 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-01-30 20:34:37.675 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-01-30 20:34:37.688 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-01-30 20:34:38.038 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-01-30 20:34:38.040 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 7600 ms
2023-01-30 20:34:39.291 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-01-30 20:34:39.291 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-01-30 20:34:39.292 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-01-30 20:34:39.292 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-01-30 20:34:39.292 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-01-30 20:34:39.292 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-01-30 20:34:39.292 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-01-30 20:34:39.292 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-01-30 20:34:40.238 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-01-30 20:34:40.260 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-01-30 20:34:40.260 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-01-30 20:34:40.267 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-01-30 20:34:40.269 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-01-30 20:34:40.270 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51675082080241'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-01-30 20:34:40.270 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-01-30 20:34:40.271 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-01-30 20:34:40.273 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@a859c5
2023-01-30 20:34:40.367 febs [main] INFO  p6spy - 2023-01-30 20:34:40 | 耗时 8 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-01-30 20:34:41.227 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-01-30 20:34:43.534 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-01-30 20:34:43.622 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-01-30 20:34:43.783 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-01-30 20:34:43.817 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-01-30 20:34:43.851 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-01-30 20:34:43.865 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-01-30 20:34:43.907 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-01-30 20:34:43.914 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 15.085 seconds (JVM running for 17.119)
2023-01-30 20:34:43.935 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-01-30 20:34:43.939 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-01-30 20:34:43.939 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-01-30 20:34:44.018 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 6 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-01-30 20:34:44.038 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 13 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:34:44.217 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 2 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-01-30 20:34:44.246 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 6 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-01-30 20:34:44.286 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 6 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-01-30 20:34:44.296 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:34:44.307 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-01-30 20:34:44.316 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-01-30 20:34:44.322 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-01-30 20:34:44.328 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:34:44.335 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-01-30 20:34:44.340 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-01-30 20:34:44.348 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-01-30 20:34:44.353 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:34:44.361 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-01-30 20:34:44.366 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-01-30 20:34:44.369 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-01-30 20:34:44.374 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:34:44.381 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-01-30 20:34:44.387 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-01-30 20:34:44.393 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-01-30 20:34:44.398 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:34:44.402 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-01-30 20:34:44.407 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-01-30 20:34:44.409 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-01-30 20:34:44.418 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:34:44.425 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油';
2023-01-30 20:34:44.435 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 20:34:44.439 febs [main] INFO  p6spy - 2023-01-30 20:34:44 | 耗时 2 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-01-30 20:34:44.442 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-01-30 20:34:44.443 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-01-30 20:34:44.443 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-01-30 20:34:44.443 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-01-30 20:34:44.443 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-01-30T20:34:44.443
2023-01-30 20:34:44.799 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-01-30 20:34:44.820 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-01-30 20:34:44.821 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51675081836483"'s failed in-progress jobs.
2023-01-30 20:34:44.829 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675082080241 started.
2023-01-30 20:34:45.340 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-01-30 20:34:45.340 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-01-30 20:34:45.350 febs [RMI TCP Connection(2)-192.168.56.1] INFO  p6spy - 2023-01-30 20:34:45 | 耗时 9 ms | SQL 语句：
/* ping */ SELECT 1;
2023-01-30 20:34:45.370 febs [RMI TCP Connection(3)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 29 ms
2023-01-30 20:36:03.826 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 20:36:03.896 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 20:36:03 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T20:36:03.851+0800' WHERE username = '荍荍加油';
2023-01-30 20:36:03.900 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 20:36:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:36:03.937 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 20:36:03 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-01-30T20:36:03.919+0800', '', '127.0.0.1' );
2023-01-30 20:36:03.990 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-01-30 20:36:03 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-01-30 20:36:04.137 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:36:04.196 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 3 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-01-30 20:36:04.686 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:36:04.689 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:36:04.716 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 22 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 20:36:04.720 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 20:36:04.722 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 20:36:04.726 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 4 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-01-30 20:36:04.728 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 20:36:04.736 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-01-30 20:36:04.741 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-01-30 20:36:04.780 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 32 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-01-30 20:36:04.810 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 7 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 20:36:04.825 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-01-30 20:36:04 | 耗时 5 ms | SQL 语句：
SELECT DATE_FORMAT( spo.days, '%m-%d' ) AS days, IFNULL(er.temperature,0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-01-30 20:47:31.967 febs [http-nio-9527-exec-10] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-01-30 20:47:32.015 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-01-30T20:47:31.989+0800' WHERE username = 'admin';
2023-01-30 20:47:32.021 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-01-30 20:47:32.047 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-01-30T20:47:32.031+0800', '', '127.0.0.1' );
2023-01-30 20:47:32.104 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:47:32.112 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 2 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-01-30 20:47:32.416 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:47:32.419 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-01-30 20:47:32.437 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 13 ms | SQL 语句：
select count(1) from t_login_log;
2023-01-30 20:47:32.437 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 11 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-01-30 20:47:32.442 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-01-30 20:47:32.443 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-01-30 20:47:32.446 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-01-30 20:47:32.450 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 2 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-01-30 20:47:32.452 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-01-30 20:47:32.455 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-01-30 20:47:32.457 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-01-30 20:47:32.472 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 11 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-01-30 20:47:32.476 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-01-30 20:47:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-01-30 20:53:10.938 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675082080241 paused.
2023-01-30 20:53:10.951 febs [Thread-35] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-01-30 20:53:10.979 febs [Thread-35] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-01-30 20:53:10.979 febs [Thread-35] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-01-30 20:53:10.979 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675082080241 shutting down.
2023-01-30 20:53:10.979 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675082080241 paused.
2023-01-30 20:53:10.981 febs [Thread-35] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51675082080241 shutdown complete.
2023-01-30 20:53:10.992 febs [Thread-35] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-01-30 20:53:10.993 febs [Thread-35] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-01-30 20:53:11.001 febs [Thread-35] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
