2023-04-25 00:15:42.748 febs [Thread-18] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682346660163 paused.
2023-04-25 00:15:42.795 febs [Thread-18] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-04-25 00:15:42.916 febs [Thread-18] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-04-25 00:15:42.917 febs [Thread-18] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-04-25 00:15:42.918 febs [Thread-18] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682346660163 shutting down.
2023-04-25 00:15:42.918 febs [Thread-18] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682346660163 paused.
2023-04-25 00:15:42.921 febs [Thread-18] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682346660163 shutdown complete.
2023-04-25 00:15:42.937 febs [Thread-18] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-04-25 00:15:42.943 febs [Thread-18] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-04-25 00:15:42.949 febs [Thread-18] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-04-25 22:01:36.090 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 16448 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-04-25 22:01:36.092 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-04-25 22:01:38.759 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-04-25 22:01:38.762 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-04-25 22:01:38.836 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 repository interfaces.
2023-04-25 22:01:39.212 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$3202a365] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:39.361 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:39.462 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c51ef09] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:39.471 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:39.474 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:39.483 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a2c37e38] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:39.499 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e437fe1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.076 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$7083735] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.165 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.169 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.273 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.281 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$f44ada47] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.286 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.295 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$e08bead2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.304 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.307 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.311 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-04-25 22:01:40.322 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-04-25 22:01:40.789 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-04-25 22:01:40.789 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-04-25 22:01:40.790 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-04-25 22:01:40.790 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-04-25 22:01:40.790 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.806 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:40.816 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.916 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.925 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.931 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.935 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.965 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.966 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.975 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.976 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:41.978 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.025 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.049 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.078 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.079 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.083 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.115 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.117 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.143 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.144 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.149 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.179 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.179 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.181 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.198 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.224 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$fe56fdc9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.229 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$b0a3bfe2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.232 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$6bbaa5d1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.239 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.242 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.249 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$92861cff] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.255 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.258 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$e0629b58] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.273 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.275 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.281 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.284 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.305 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.325 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.331 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.331 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.343 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.363 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:01:42.775 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-04-25 22:01:42.791 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-04-25 22:01:42.797 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-04-25 22:01:42.797 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-04-25 22:01:42.804 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-04-25 22:01:43.215 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-04-25 22:01:43.215 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 7047 ms
2023-04-25 22:01:43.858 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-04-25 22:01:43.859 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-04-25 22:01:43.859 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-04-25 22:01:43.859 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-04-25 22:01:43.859 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-04-25 22:01:43.859 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-04-25 22:01:43.859 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-04-25 22:01:43.859 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-04-25 22:01:44.572 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-04-25 22:01:44.584 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-04-25 22:01:44.584 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-04-25 22:01:44.588 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-04-25 22:01:44.589 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-04-25 22:01:44.590 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51682431304573'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-04-25 22:01:44.590 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-04-25 22:01:44.590 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-04-25 22:01:44.591 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3686389
2023-04-25 22:01:44.662 febs [main] INFO  p6spy - 2023-04-25 22:01:44 | 耗时 17 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-04-25 22:01:45.917 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-04-25 22:01:49.816 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-04-25 22:01:49.878 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-04-25 22:01:49.959 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-04-25 22:01:49.975 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-04-25 22:01:49.993 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-25 22:01:49.994 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-04-25 22:01:50.014 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-04-25 22:01:50.016 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 14.473 seconds (JVM running for 20.084)
2023-04-25 22:01:50.025 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-04-25 22:01:50.026 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-04-25 22:01:50.026 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-04-25 22:01:50.068 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 4 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-04-25 22:01:50.082 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 10 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:01:50.159 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-04-25 22:01:50.178 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 6 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-04-25 22:01:50.208 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 2 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-04-25 22:01:50.214 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:01:50.220 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-04-25 22:01:50.223 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-04-25 22:01:50.228 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-04-25 22:01:50.233 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:01:50.236 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-04-25 22:01:50.240 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-04-25 22:01:50.243 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-04-25 22:01:50.247 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:01:50.253 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-04-25 22:01:50.257 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-04-25 22:01:50.259 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-04-25 22:01:50.263 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:01:50.268 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-04-25 22:01:50.271 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-04-25 22:01:50.274 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-04-25 22:01:50.277 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:01:50.281 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-04-25 22:01:50.286 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-04-25 22:01:50.289 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-04-25 22:01:50.294 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:01:50.298 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油';
2023-04-25 22:01:50.303 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-25 22:01:50.306 febs [main] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-04-25 22:01:50.307 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-04-25 22:01:50.307 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-04-25 22:01:50.307 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-04-25 22:01:50.307 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-04-25 22:01:50.308 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-04-25T22:01:50.308
2023-04-25 22:01:50.864 febs [RMI TCP Connection(1)-192.168.56.1] INFO  p6spy - 2023-04-25 22:01:50 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-04-25 22:01:50.972 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-04-25 22:01:50.985 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-04-25 22:01:50.985 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51682346660163"'s failed in-progress jobs.
2023-04-25 22:01:50.994 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682431304573 started.
2023-04-25 22:01:52.178 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-25 22:01:52.178 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-04-25 22:01:52.192 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 14 ms
2023-04-25 22:04:11.360 febs [http-nio-9527-exec-10] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 22:04:11.530 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T22:04:11.495+0800' WHERE username = '荍荍加油';
2023-04-25 22:04:11.533 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:04:11.573 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 5 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-25T22:04:11.560+0800', '', '127.0.0.1' );
2023-04-25 22:04:11.605 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-25 22:04:11.696 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:04:11.723 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 3 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-25 22:04:11.879 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:04:11.885 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:04:11.897 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 8 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:04:11.902 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:04:11.905 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:04:11.909 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:04:11.911 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 4 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 22:04:11.912 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 22:04:11.921 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 22:04:11.932 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 8 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 22:04:11.941 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:04:11.947 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:04:11 | 耗时 3 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:05:57.509 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:05:57.509 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:05:57.513 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 22:05:57.514 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:05:57.516 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:05:57.516 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 22:05:57.519 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:05:57.520 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 22:05:57.522 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:05:57.522 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:05:57.524 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 22:05:57.525 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:05:57 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:06:01.430 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:06:01.434 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:06:01.437 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 22:06:01.440 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:06:01.441 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 22:06:01.442 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:06:01.444 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:06:01.445 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:06:01.447 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 4 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 22:06:01.447 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 22:06:01.448 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:06:01.452 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:06:01 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:06:07.122 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:06:07.123 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:06:07.126 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 22:06:07.130 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:06:07.130 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 22:06:07.132 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:06:07.133 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 22:06:07.135 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:06:07.135 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:06:07.138 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:06:07.140 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 22:06:07.140 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:06:07 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:09:13.164 febs [http-nio-9527-exec-10] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 22:09:13.168 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T22:09:13.166+0800' WHERE username = 'sungou';
2023-04-25 22:09:13.170 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:09:13.177 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'sungou', '2023-04-25T22:09:13.174+0800', '', '127.0.0.1' );
2023-04-25 22:09:13.187 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-04-25 22:09:13.197 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:09:13.202 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 2 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou') order by m.order_num;
2023-04-25 22:09:13.288 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:09:13.291 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:09:13.293 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 15;
2023-04-25 22:09:13.296 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 2;
2023-04-25 22:09:13.296 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:09:13.298 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:09:13.298 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 2 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 2) AS on4;
2023-04-25 22:09:13.299 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:09:13.299 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:09:13.302 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:09:13.303 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:09:13.305 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:09:13 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'sungou' group by days;
2023-04-25 22:11:29.848 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:11:29.850 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:11:29.853 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 15;
2023-04-25 22:11:29.856 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:11:29.857 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 2;
2023-04-25 22:11:29.858 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:11:29.859 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 2 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 2) AS on4;
2023-04-25 22:11:29.859 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:11:29.861 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:11:29.861 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:11:29.863 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'sungou' group by days;
2023-04-25 22:11:29.863 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:11:29 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:11:34.095 febs [Thread-33] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682431304573 paused.
2023-04-25 22:11:34.097 febs [Thread-33] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-04-25 22:11:34.110 febs [Thread-33] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-04-25 22:11:34.111 febs [Thread-33] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-04-25 22:11:34.111 febs [Thread-33] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682431304573 shutting down.
2023-04-25 22:11:34.111 febs [Thread-33] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682431304573 paused.
2023-04-25 22:11:34.112 febs [Thread-33] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682431304573 shutdown complete.
2023-04-25 22:11:34.118 febs [Thread-33] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-04-25 22:11:34.118 febs [Thread-33] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-04-25 22:11:34.124 febs [Thread-33] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-04-25 22:11:39.947 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 14944 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-04-25 22:11:39.950 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-04-25 22:11:40.830 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-04-25 22:11:40.832 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-04-25 22:11:40.881 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40ms. Found 0 repository interfaces.
2023-04-25 22:11:41.133 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$5e67b7c9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.227 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.291 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$38b7036d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.298 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.301 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.307 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cf28929c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.323 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$3aa89445] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.596 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$336d4b99] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.675 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.678 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.754 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.760 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$20afeeab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.763 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.769 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$cf0ff36] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.776 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.778 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.786 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-04-25 22:11:41.795 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-04-25 22:11:41.980 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-04-25 22:11:41.980 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-04-25 22:11:41.980 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-04-25 22:11:41.980 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-04-25 22:11:41.980 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.989 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:41.995 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.630 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.638 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.642 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.644 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.668 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.669 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.676 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.677 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.678 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.721 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.742 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.771 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.772 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.775 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.805 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.807 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.830 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.831 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.834 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.855 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.856 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.857 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.869 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.887 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$2abc122d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.890 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$dd08d446] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.893 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$981fba35] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.899 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.901 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.907 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$beeb3163] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.912 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.914 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$cc7afbc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.922 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.923 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.928 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.930 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.980 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.990 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.994 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:42.994 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:43.002 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:43.015 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-25 22:11:43.333 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-04-25 22:11:43.344 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-04-25 22:11:43.348 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-04-25 22:11:43.348 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-04-25 22:11:43.353 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-04-25 22:11:43.442 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-04-25 22:11:43.442 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 3401 ms
2023-04-25 22:11:43.921 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-04-25 22:11:43.921 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-04-25 22:11:43.921 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-04-25 22:11:43.921 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-04-25 22:11:43.921 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-04-25 22:11:43.922 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-04-25 22:11:43.922 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-04-25 22:11:43.922 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-04-25 22:11:44.414 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-04-25 22:11:44.426 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-04-25 22:11:44.426 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-04-25 22:11:44.430 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-04-25 22:11:44.431 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-04-25 22:11:44.431 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51682431904416'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-04-25 22:11:44.431 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-04-25 22:11:44.431 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-04-25 22:11:44.432 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1322b575
2023-04-25 22:11:44.488 febs [main] INFO  p6spy - 2023-04-25 22:11:44 | 耗时 3 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-04-25 22:11:44.958 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-04-25 22:11:46.088 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-04-25 22:11:46.132 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-04-25 22:11:46.193 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-04-25 22:11:46.207 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-04-25 22:11:46.219 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-25 22:11:46.222 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-04-25 22:11:46.234 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-04-25 22:11:46.236 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 6.796 seconds (JVM running for 7.566)
2023-04-25 22:11:46.245 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-04-25 22:11:46.245 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-04-25 22:11:46.245 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-04-25 22:11:46.273 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 2 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-04-25 22:11:46.278 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:11:46.372 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-04-25 22:11:46.383 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-04-25 22:11:46.403 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-04-25 22:11:46.407 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:11:46.410 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-04-25 22:11:46.412 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-04-25 22:11:46.415 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-04-25 22:11:46.422 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:11:46.424 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-04-25 22:11:46.427 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-04-25 22:11:46.429 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-04-25 22:11:46.431 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:11:46.435 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-04-25 22:11:46.438 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-04-25 22:11:46.439 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-04-25 22:11:46.442 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:11:46.444 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-04-25 22:11:46.446 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-04-25 22:11:46.447 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-04-25 22:11:46.449 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:11:46.452 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-04-25 22:11:46.454 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-04-25 22:11:46.455 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-04-25 22:11:46.457 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:11:46.459 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油';
2023-04-25 22:11:46.461 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-25 22:11:46.463 febs [main] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-04-25 22:11:46.464 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-04-25 22:11:46.464 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-04-25 22:11:46.464 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-04-25 22:11:46.464 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-04-25 22:11:46.464 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-04-25T22:11:46.464
2023-04-25 22:11:46.909 febs [RMI TCP Connection(1)-192.168.56.1] INFO  p6spy - 2023-04-25 22:11:46 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-04-25 22:11:47.215 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-04-25 22:11:47.230 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-04-25 22:11:47.230 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51682431304573"'s failed in-progress jobs.
2023-04-25 22:11:47.245 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682431904416 started.
2023-04-25 22:11:47.405 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-25 22:11:47.405 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-04-25 22:11:47.417 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 12 ms
2023-04-25 22:12:10.455 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:12:10.455 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:12:10.518 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 15;
2023-04-25 22:12:10.522 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 2;
2023-04-25 22:12:10.529 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 4 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 2 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 2) AS on4;
2023-04-25 22:12:10.537 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:12:10.540 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:12:10.577 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:12:10.579 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:12:10.581 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:12:10.585 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:12:10.588 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:12:10 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'sungou' group by days;
2023-04-25 22:12:59.075 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:12:59.075 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:12:59.090 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 15;
2023-04-25 22:12:59.093 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 2;
2023-04-25 22:12:59.099 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 3 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 2 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 2) AS on4;
2023-04-25 22:12:59.102 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:12:59.104 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:12:59.105 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 18 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:12:59.107 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:12:59.110 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:12:59.112 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:12:59.115 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:12:59 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'sungou' group by days;
2023-04-25 22:13:02.507 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:13:02.507 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:13:02.511 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 15;
2023-04-25 22:13:02.512 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:13:02.513 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 2;
2023-04-25 22:13:02.513 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:13:02.515 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:13:02.515 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 2 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 2) AS on4;
2023-04-25 22:13:02.517 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:13:02.517 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:13:02.521 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'sungou' group by days;
2023-04-25 22:13:02.521 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:13:02 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:13:03.680 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:13:03.680 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:13:03.686 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 3 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 15;
2023-04-25 22:13:03.686 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:13:03.689 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:13:03.692 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:13:03.692 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 2;
2023-04-25 22:13:03.694 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:13:03.696 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'sungou' group by days;
2023-04-25 22:13:03.699 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 5 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 2 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 2 AND pm.type = 2) AS on4;
2023-04-25 22:13:03.702 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:13:03.708 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:03 | 耗时 3 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:13:18.264 febs [http-nio-9527-exec-4] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 22:13:18.299 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T22:13:18.279+0800' WHERE username = '荍荍加油';
2023-04-25 22:13:18.304 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:13:18.330 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-25T22:13:18.316+0800', '', '127.0.0.1' );
2023-04-25 22:13:18.354 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-25 22:13:18.373 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:13:18.392 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 2 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-25 22:13:18.514 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:13:18.516 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:13:18.518 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 22:13:18.522 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:13:18.523 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 22:13:18.524 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:13:18.526 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:13:18.526 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 22:13:18.528 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:13:18.529 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:13:18.531 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 22:13:18.531 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:13:18 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:19:30.926 febs [http-nio-9527-exec-1] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 22:19:30.931 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:19:30 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T22:19:30.928+0800' WHERE username = 'fank';
2023-04-25 22:19:30.932 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:19:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:19:30.939 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:19:30 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-25T22:19:30.937+0800', '', '127.0.0.1' );
2023-04-25 22:19:30.964 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:19:30.967 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 22:19:30 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-25 22:19:31.130 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:19:31.135 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:19:31.138 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-25 22:19:31.142 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:19:31.142 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-25 22:19:31.144 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:19:31.145 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-25 22:19:31.145 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:19:31.147 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:19:31.148 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:19:31.150 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-25 22:19:31.157 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 8 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-25 22:19:31.161 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-25 22:19:31.172 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-25 22:19:31.176 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:19:31 | 耗时 1 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-25 22:19:48.571 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:19:48.713 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:19:48 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM infrastructure_info ii WHERE 1 = 1;
2023-04-25 22:19:48.720 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:19:48 | 耗时 1 ms | SQL 语句：
SELECT ii.id, ii.infrastructure_name AS infrastructureName, ii.use_date AS useDate, ii.community, ii.brand FROM infrastructure_info ii WHERE 1 = 1 ORDER BY ii.use_date DESC LIMIT 0,10;
2023-04-25 22:19:51.162 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:19:51.199 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:19:51 | 耗时 2 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) WHERE im.date BETWEEN DATE('2023-04-19') AND DATE('2023-04-25') ORDER BY im.id;
2023-04-25 22:19:51.204 febs [http-nio-9527-exec-1] INFO  c.m.f.c.c.InfrastructureManageController - 04月19日（星期三）
2023-04-25 22:19:51.205 febs [http-nio-9527-exec-1] INFO  c.m.f.c.c.InfrastructureManageController - 04月20日（星期四）
2023-04-25 22:19:51.205 febs [http-nio-9527-exec-1] INFO  c.m.f.c.c.InfrastructureManageController - 04月21日（星期五）
2023-04-25 22:19:51.205 febs [http-nio-9527-exec-1] INFO  c.m.f.c.c.InfrastructureManageController - 04月22日（星期六）
2023-04-25 22:19:51.205 febs [http-nio-9527-exec-1] INFO  c.m.f.c.c.InfrastructureManageController - 04月23日（星期日）
2023-04-25 22:19:51.206 febs [http-nio-9527-exec-1] INFO  c.m.f.c.c.InfrastructureManageController - 04月24日（星期一）
2023-04-25 22:19:51.206 febs [http-nio-9527-exec-1] INFO  c.m.f.c.c.InfrastructureManageController - 04月25日（星期二）
2023-04-25 22:19:55.548 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:19:55.560 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 22:19:55 | 耗时 1 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) WHERE im.date BETWEEN DATE('2023-02-13') AND DATE('2023-04-25') ORDER BY im.id;
2023-04-25 22:19:55.566 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月13日（星期一）
2023-04-25 22:19:55.567 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月14日（星期二）
2023-04-25 22:19:55.567 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月15日（星期三）
2023-04-25 22:19:55.567 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月16日（星期四）
2023-04-25 22:19:55.567 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月17日（星期五）
2023-04-25 22:19:55.568 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月18日（星期六）
2023-04-25 22:19:55.568 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月19日（星期日）
2023-04-25 22:19:55.568 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月20日（星期一）
2023-04-25 22:19:55.568 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月21日（星期二）
2023-04-25 22:19:55.568 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月22日（星期三）
2023-04-25 22:19:55.568 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月23日（星期四）
2023-04-25 22:19:55.569 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月24日（星期五）
2023-04-25 22:19:55.569 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月25日（星期六）
2023-04-25 22:19:55.569 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月26日（星期日）
2023-04-25 22:19:55.569 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月27日（星期一）
2023-04-25 22:19:55.569 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月28日（星期二）
2023-04-25 22:19:55.569 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月01日（星期三）
2023-04-25 22:19:55.569 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月02日（星期四）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月03日（星期五）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月04日（星期六）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月05日（星期日）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月06日（星期一）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月07日（星期二）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月08日（星期三）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月09日（星期四）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月10日（星期五）
2023-04-25 22:19:55.570 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月11日（星期六）
2023-04-25 22:19:55.571 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月12日（星期日）
2023-04-25 22:19:55.571 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月13日（星期一）
2023-04-25 22:19:55.571 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月14日（星期二）
2023-04-25 22:19:55.571 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月15日（星期三）
2023-04-25 22:19:55.571 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月16日（星期四）
2023-04-25 22:19:55.571 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月17日（星期五）
2023-04-25 22:19:55.571 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月18日（星期六）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月19日（星期日）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月20日（星期一）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月21日（星期二）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月22日（星期三）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月23日（星期四）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月24日（星期五）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月25日（星期六）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月26日（星期日）
2023-04-25 22:19:55.572 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月27日（星期一）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月28日（星期二）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月29日（星期三）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月30日（星期四）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月31日（星期五）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月01日（星期六）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月02日（星期日）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月03日（星期一）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月04日（星期二）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月05日（星期三）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月06日（星期四）
2023-04-25 22:19:55.573 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月07日（星期五）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月08日（星期六）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月09日（星期日）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月10日（星期一）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月11日（星期二）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月12日（星期三）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月13日（星期四）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月14日（星期五）
2023-04-25 22:19:55.574 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月15日（星期六）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月16日（星期日）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月17日（星期一）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月18日（星期二）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月19日（星期三）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月20日（星期四）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月21日（星期五）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月22日（星期六）
2023-04-25 22:19:55.575 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月23日（星期日）
2023-04-25 22:19:55.576 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月24日（星期一）
2023-04-25 22:19:55.576 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月25日（星期二）
2023-04-25 22:20:33.257 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:33.259 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:20:33 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 1;
2023-04-25 22:20:39.847 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:39.851 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:20:39 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 5;
2023-04-25 22:20:43.265 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:43.269 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:20:43 | 耗时 2 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 1;
2023-04-25 22:20:47.246 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:47.254 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:20:47 | 耗时 3 ms | SQL 语句：
UPDATE infrastructure_manage SET `date` = '2023-02-17', message = '冰红茶是个伟大创造', status = 3, worker = 1 WHERE id = 1;
2023-04-25 22:20:47.295 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:47.300 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:20:47 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) WHERE im.date BETWEEN DATE('2023-02-13') AND DATE('2023-04-25') ORDER BY im.id;
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月13日（星期一）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月14日（星期二）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月15日（星期三）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月16日（星期四）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月17日（星期五）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月18日（星期六）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月19日（星期日）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月20日（星期一）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月21日（星期二）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月22日（星期三）
2023-04-25 22:20:47.305 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月23日（星期四）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月24日（星期五）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月25日（星期六）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月26日（星期日）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月27日（星期一）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 02月28日（星期二）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月01日（星期三）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月02日（星期四）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月03日（星期五）
2023-04-25 22:20:47.306 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月04日（星期六）
2023-04-25 22:20:47.308 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月05日（星期日）
2023-04-25 22:20:47.308 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月06日（星期一）
2023-04-25 22:20:47.308 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月07日（星期二）
2023-04-25 22:20:47.308 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月08日（星期三）
2023-04-25 22:20:47.308 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月09日（星期四）
2023-04-25 22:20:47.309 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月10日（星期五）
2023-04-25 22:20:47.309 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月11日（星期六）
2023-04-25 22:20:47.309 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月12日（星期日）
2023-04-25 22:20:47.309 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月13日（星期一）
2023-04-25 22:20:47.309 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月14日（星期二）
2023-04-25 22:20:47.309 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月15日（星期三）
2023-04-25 22:20:47.309 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月16日（星期四）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月17日（星期五）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月18日（星期六）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月19日（星期日）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月20日（星期一）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月21日（星期二）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月22日（星期三）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月23日（星期四）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月24日（星期五）
2023-04-25 22:20:47.310 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月25日（星期六）
2023-04-25 22:20:47.311 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月26日（星期日）
2023-04-25 22:20:47.311 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月27日（星期一）
2023-04-25 22:20:47.311 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月28日（星期二）
2023-04-25 22:20:47.311 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月29日（星期三）
2023-04-25 22:20:47.311 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月30日（星期四）
2023-04-25 22:20:47.311 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 03月31日（星期五）
2023-04-25 22:20:47.311 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月01日（星期六）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月02日（星期日）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月03日（星期一）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月04日（星期二）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月05日（星期三）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月06日（星期四）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月07日（星期五）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月08日（星期六）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月09日（星期日）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月10日（星期一）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月11日（星期二）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月12日（星期三）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月13日（星期四）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月14日（星期五）
2023-04-25 22:20:47.312 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月15日（星期六）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月16日（星期日）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月17日（星期一）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月18日（星期二）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月19日（星期三）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月20日（星期四）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月21日（星期五）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月22日（星期六）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月23日（星期日）
2023-04-25 22:20:47.313 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月24日（星期一）
2023-04-25 22:20:47.314 febs [http-nio-9527-exec-3] INFO  c.m.f.c.c.InfrastructureManageController - 04月25日（星期二）
2023-04-25 22:20:55.019 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:55.024 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:20:55 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 1;
2023-04-25 22:20:57.606 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:57.613 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:20:57 | 耗时 4 ms | SQL 语句：
UPDATE infrastructure_manage SET `date` = '2023-02-17', message = '冰红茶是个伟大创造', status = 1, worker = 1 WHERE id = 1;
2023-04-25 22:20:57.658 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:57.663 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:20:57 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) WHERE im.date BETWEEN DATE('2023-02-13') AND DATE('2023-04-25') ORDER BY im.id;
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月13日（星期一）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月14日（星期二）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月15日（星期三）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月16日（星期四）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月17日（星期五）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月18日（星期六）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月19日（星期日）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月20日（星期一）
2023-04-25 22:20:57.665 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月21日（星期二）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月22日（星期三）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月23日（星期四）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月24日（星期五）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月25日（星期六）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月26日（星期日）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月27日（星期一）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 02月28日（星期二）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月01日（星期三）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月02日（星期四）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月03日（星期五）
2023-04-25 22:20:57.666 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月04日（星期六）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月05日（星期日）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月06日（星期一）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月07日（星期二）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月08日（星期三）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月09日（星期四）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月10日（星期五）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月11日（星期六）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月12日（星期日）
2023-04-25 22:20:57.667 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月13日（星期一）
2023-04-25 22:20:57.668 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月14日（星期二）
2023-04-25 22:20:57.668 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月15日（星期三）
2023-04-25 22:20:57.668 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月16日（星期四）
2023-04-25 22:20:57.668 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月17日（星期五）
2023-04-25 22:20:57.668 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月18日（星期六）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月19日（星期日）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月20日（星期一）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月21日（星期二）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月22日（星期三）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月23日（星期四）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月24日（星期五）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月25日（星期六）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月26日（星期日）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月27日（星期一）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月28日（星期二）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月29日（星期三）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月30日（星期四）
2023-04-25 22:20:57.669 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 03月31日（星期五）
2023-04-25 22:20:57.670 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月01日（星期六）
2023-04-25 22:20:57.670 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月02日（星期日）
2023-04-25 22:20:57.670 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月03日（星期一）
2023-04-25 22:20:57.670 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月04日（星期二）
2023-04-25 22:20:57.670 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月05日（星期三）
2023-04-25 22:20:57.670 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月06日（星期四）
2023-04-25 22:20:57.670 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月07日（星期五）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月08日（星期六）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月09日（星期日）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月10日（星期一）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月11日（星期二）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月12日（星期三）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月13日（星期四）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月14日（星期五）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月15日（星期六）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月16日（星期日）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月17日（星期一）
2023-04-25 22:20:57.671 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月18日（星期二）
2023-04-25 22:20:57.672 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月19日（星期三）
2023-04-25 22:20:57.672 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月20日（星期四）
2023-04-25 22:20:57.672 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月21日（星期五）
2023-04-25 22:20:57.672 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月22日（星期六）
2023-04-25 22:20:57.672 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月23日（星期日）
2023-04-25 22:20:57.672 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月24日（星期一）
2023-04-25 22:20:57.672 febs [http-nio-9527-exec-2] INFO  c.m.f.c.c.InfrastructureManageController - 04月25日（星期二）
2023-04-25 22:20:58.482 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:20:58.485 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:20:58 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 1;
2023-04-25 22:21:00.750 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:00.759 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:21:00 | 耗时 4 ms | SQL 语句：
UPDATE infrastructure_manage SET `date` = '2023-02-17', message = '冰红茶是个伟大创造', status = 3, worker = 1 WHERE id = 1;
2023-04-25 22:21:00.812 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:00.817 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 22:21:00 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) WHERE im.date BETWEEN DATE('2023-02-13') AND DATE('2023-04-25') ORDER BY im.id;
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月13日（星期一）
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月14日（星期二）
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月15日（星期三）
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月16日（星期四）
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月17日（星期五）
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月18日（星期六）
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月19日（星期日）
2023-04-25 22:21:00.819 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月20日（星期一）
2023-04-25 22:21:00.820 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月21日（星期二）
2023-04-25 22:21:00.820 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月22日（星期三）
2023-04-25 22:21:00.820 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月23日（星期四）
2023-04-25 22:21:00.820 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月24日（星期五）
2023-04-25 22:21:00.820 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月25日（星期六）
2023-04-25 22:21:00.820 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月26日（星期日）
2023-04-25 22:21:00.821 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月27日（星期一）
2023-04-25 22:21:00.821 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 02月28日（星期二）
2023-04-25 22:21:00.821 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月01日（星期三）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月02日（星期四）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月03日（星期五）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月04日（星期六）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月05日（星期日）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月06日（星期一）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月07日（星期二）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月08日（星期三）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月09日（星期四）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月10日（星期五）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月11日（星期六）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月12日（星期日）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月13日（星期一）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月14日（星期二）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月15日（星期三）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月16日（星期四）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月17日（星期五）
2023-04-25 22:21:00.822 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月18日（星期六）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月19日（星期日）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月20日（星期一）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月21日（星期二）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月22日（星期三）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月23日（星期四）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月24日（星期五）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月25日（星期六）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月26日（星期日）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月27日（星期一）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月28日（星期二）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月29日（星期三）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月30日（星期四）
2023-04-25 22:21:00.823 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 03月31日（星期五）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月01日（星期六）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月02日（星期日）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月03日（星期一）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月04日（星期二）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月05日（星期三）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月06日（星期四）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月07日（星期五）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月08日（星期六）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月09日（星期日）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月10日（星期一）
2023-04-25 22:21:00.824 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月11日（星期二）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月12日（星期三）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月13日（星期四）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月14日（星期五）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月15日（星期六）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月16日（星期日）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月17日（星期一）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月18日（星期二）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月19日（星期三）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月20日（星期四）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月21日（星期五）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月22日（星期六）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月23日（星期日）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月24日（星期一）
2023-04-25 22:21:00.825 febs [http-nio-9527-exec-6] INFO  c.m.f.c.c.InfrastructureManageController - 04月25日（星期二）
2023-04-25 22:21:02.944 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:02.947 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:21:02 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 1;
2023-04-25 22:21:07.479 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:07.484 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:21:07 | 耗时 1 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 1;
2023-04-25 22:21:13.615 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:13.618 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:21:13 | 耗时 0 ms | SQL 语句：
SELECT im.id AS recordId, im.worker, im.date, im.message, im.status, ii.infrastructure_name AS infrastructureName, ii.community, ii.use_date, ii.id, wi.name AS workerName FROM infrastructure_manage im JOIN worker_info wi ON ( wi.id = im.worker ) JOIN infrastructure_info ii ON (ii.id = im.infrastructure_id) where im.id = 1;
2023-04-25 22:21:31.073 febs [http-nio-9527-exec-5] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 22:21:31.077 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T22:21:31.074+0800' WHERE username = '荍荍加油';
2023-04-25 22:21:31.078 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 22:21:31.086 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-25T22:21:31.083+0800', '', '127.0.0.1' );
2023-04-25 22:21:31.095 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-25 22:21:31.108 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:31.111 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-25 22:21:31.205 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:31.210 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 22:21:31.210 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:31.213 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 22:21:31.214 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:21:31.215 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:21:31.215 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 22:21:31.216 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:21:31.217 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:21:31.219 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:21:31.219 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:21:31.222 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 22:21:31 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 22:21:32.950 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:32.950 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:32.959 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 22:21:32 | 耗时 5 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-04-25 22:21:32.964 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:21:32 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-04-25 22:21:36.553 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:36.554 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:36.557 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 22:21:36.558 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 22:21:36.559 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 22:21:36.560 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:21:36.561 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 22:21:36.561 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 22:21:36.563 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 22:21:36.563 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 22:21:36.565 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 22:21:36.565 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 22:21:36 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 22:21:40.288 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:40.288 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:40.292 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 22:21:40 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-04-25 22:21:40.292 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 22:21:40 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-04-25 22:21:47.938 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 22:21:47.946 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 22:21:47 | 耗时 0 ms | SQL 语句：
SELECT ri.id, ri.code, ri.content, ri.images, ri.worker, ri.repair_status AS repairStatus, ri.create_date AS createDate, oi.name, oi.phone, tu.LAST_LOGIN_TIME AS lastTime, hi.address, hi.number, hi.floor, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM repair_info ri LEFT JOIN t_user tu ON ( tu.USER_ID = ri.user_id ) LEFT JOIN owner_info oi ON ( oi.user_id = tu.USER_ID ) LEFT JOIN houses_info hi ON ( hi.id = ri.houses_id ) LEFT JOIN worker_info wi ON ( wi.id = ri.worker ) WHERE 1 = 1 AND ri.id = 4;
2023-04-25 23:11:46.218 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-25 23:34:24.218 febs [http-nio-9527-exec-3] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 23:34:24.266 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T23:34:24.241+0800' WHERE username = '荍荍加油';
2023-04-25 23:34:24.273 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 23:34:24.317 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-25T23:34:24.281+0800', '', '127.0.0.1' );
2023-04-25 23:34:24.342 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-25 23:34:24.363 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:34:24.368 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 0 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-25 23:34:24.523 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:34:24.528 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:34:24.536 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 5 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 23:34:24.539 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 3 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 23:34:24.540 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:34:24.543 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:34:24.545 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 23:34:24.545 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 23:34:24.548 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 23:34:24.559 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 11 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 23:34:24.564 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 23:34:24.570 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:34:24 | 耗时 3 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 23:39:12.900 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:12.900 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:12.907 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 23:39:12.907 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 23:39:12.909 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:12.910 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 23:39:12.910 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:12.912 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 23:39:12.913 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 23:39:12.915 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 23:39:12.916 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 23:39:12.919 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:39:12 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 23:39:18.916 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:18.917 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:18.924 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 23:39:18.927 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 23:39:18.928 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 23:39:18.929 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:18.931 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:18.933 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 3 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 23:39:18.933 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 23:39:18.935 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 23:39:18.935 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 23:39:18.939 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:18 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 23:39:30.952 febs [http-nio-9527-exec-3] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 23:39:30.958 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:30 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T23:39:30.953+0800' WHERE username = '荍荍加油';
2023-04-25 23:39:30.961 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:30 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 23:39:30.973 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:30 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-25T23:39:30.967+0800', '', '127.0.0.1' );
2023-04-25 23:39:30.985 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:30 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-25 23:39:31.000 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:31.010 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 5 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-25 23:39:31.088 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:31.092 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:31.094 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-25 23:39:31.097 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 23:39:31.099 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-25 23:39:31.099 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:31.101 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:31.102 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-25 23:39:31.104 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 23:39:31.106 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 23:39:31.108 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-25 23:39:31.110 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:31 | 耗时 1 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-25 23:39:34.819 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:34.819 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:34.827 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:34 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-04-25 23:39:34.831 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:39:34 | 耗时 2 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-04-25 23:39:45.215 febs [http-nio-9527-exec-9] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-25 23:39:45.219 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-25T23:39:45.216+0800' WHERE username = 'fank';
2023-04-25 23:39:45.221 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-25 23:39:45.234 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-25T23:39:45.226+0800', '', '127.0.0.1' );
2023-04-25 23:39:45.258 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:45.262 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-25 23:39:45.397 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:45.401 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:39:45.402 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-25 23:39:45.405 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-25 23:39:45.406 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 23:39:45.409 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-25 23:39:45.409 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:45.410 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 23:39:45.411 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:39:45.413 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 23:39:45.415 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-25 23:39:45.422 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 8 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-25 23:39:45.427 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-25 23:39:45.432 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-25 23:39:45.434 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:39:45 | 耗时 1 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-25 23:40:12.988 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:40:13.049 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:40:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:40:13.052 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:40:13 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:41:26.592 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:41:26.623 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:41:26 | 耗时 6 ms | SQL 语句：
UPDATE building_info SET name='金河苑二座五梯', address='广东省广州市番禺区沙湾镇金沙湾花园金河苑二座五梯', community='金沙苑', usage_area=12124.7, surface_area=13140.2, type=2, rooms=24, units=20, layers=6, images='SA1647426086728.jpg' WHERE ID=2;
2023-04-25 23:41:26.693 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:41:26.702 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:41:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:41:26.704 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:41:26 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:41:30.380 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:41:30.403 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:41:30 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-04-25 23:41:30.405 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:41:30 | 耗时 1 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-04-25 23:41:43.673 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:41:43.684 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:41:43 | 耗时 4 ms | SQL 语句：
UPDATE worker_info SET name='赵铁柱', phone='15010399301', image='})P2X@3L(0VTAUH1{`J2Q(2.png', type=2 WHERE ID=1;
2023-04-25 23:41:43.725 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:41:43.730 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:41:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-04-25 23:41:43.731 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:41:43 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-04-25 23:42:00.046 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:42:00.050 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:42:00 | 耗时 0 ms | SQL 语句：
UPDATE worker_info SET name='赵铁柱', phone='15010399301', type=2 WHERE ID=1;
2023-04-25 23:42:00.097 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:42:00.101 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 23:42:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-04-25 23:42:00.102 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 23:42:00 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-04-25 23:42:14.984 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:42:14.994 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:42:14 | 耗时 4 ms | SQL 语句：
UPDATE worker_info SET name='张狗蛋', phone='15015001245', image='timg (13).jpg', type=3 WHERE ID=2;
2023-04-25 23:42:15.037 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:42:15.042 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:42:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-04-25 23:42:15.044 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:42:15 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-04-25 23:42:39.634 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:42:39.649 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:42:39 | 耗时 5 ms | SQL 语句：
UPDATE worker_info SET name='张狗蛋', phone='15015001245', image='猫狗轮播3.jpg', type=3 WHERE ID=2;
2023-04-25 23:42:39.697 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:42:39.703 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:42:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-04-25 23:42:39.705 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:42:39 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-04-25 23:42:43.634 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:42:43.640 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:42:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-04-25 23:42:43.641 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-25 23:42:43 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-04-25 23:47:42.059 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:47:42.067 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:47:42 | 耗时 3 ms | SQL 语句：
UPDATE worker_info SET name='陈峥嵘', phone='15010333333', image='20190530004720182.jpeg', type=1 WHERE ID=3;
2023-04-25 23:47:42.126 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:47:42.132 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:47:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM worker_info wi WHERE 1 = 1;
2023-04-25 23:47:42.134 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:47:42 | 耗时 0 ms | SQL 语句：
SELECT wi.id, wi.name, wi.phone, wi.image, wi.type, wi.create_date AS createDate FROM worker_info wi WHERE 1 = 1 LIMIT 0,10;
2023-04-25 23:47:47.263 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:47:47.269 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 23:47:47 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:47:47.270 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 23:47:47 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:48:18.286 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:48:18.297 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:48:18 | 耗时 4 ms | SQL 语句：
UPDATE building_info SET name='金河苑二座五梯', address='广东省广州市番禺区沙湾镇金沙湾花园金河苑二座五梯', community='金沙苑', usage_area=12124.7, surface_area=13140.2, type=2, rooms=24, units=20, layers=6, images='广州3.jpg' WHERE ID=2;
2023-04-25 23:48:18.362 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:48:18.366 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:48:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:48:18.367 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:48:18 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:55:52.336 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:55:52.661 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:55:52 | 耗时 20 ms | SQL 语句：
INSERT INTO building_info ( name, address, street, community, usage_area, surface_area, type, rooms, units, layers, images, create_date ) VALUES ( '一座一梯', '11111111', '0000000000', '金河苑', 2000, 2000, 3, 64, 4, 46, 'SA1682438151130.jpg', '2023-04-25 23:55:52' );
2023-04-25 23:55:52.738 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:55:52.759 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:55:52 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:55:52.764 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:55:52 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:57:03.498 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:57:03.505 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 23:57:03 | 耗时 3 ms | SQL 语句：
INSERT INTO building_info ( name, address, street, community, usage_area, surface_area, type, rooms, units, layers, images, create_date ) VALUES ( '一座二梯', '11111111', '0000000000', '金河苑', 10000, 10000, 3, 64, 4, 16, 'SA1682438222349.jpg', '2023-04-25 23:57:03' );
2023-04-25 23:57:03.560 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:57:03.569 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:57:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:57:03.570 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:57:03 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:57:09.507 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:57:09.511 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:57:09.525 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 5 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-25 23:57:09.532 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 4 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-25 23:57:09.550 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 15 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-25 23:57:09.556 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 3 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 23:57:09.556 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 4 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 23:57:09.562 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:57:09.566 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:57:09.571 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 23:57:09.572 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 11 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-25 23:57:09.574 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-25 23:57:09.577 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-25 23:57:09.581 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-25 23:57:09.583 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-25 23:57:09 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-25 23:57:50.029 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:57:50.033 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 23:57:50 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:57:50.034 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-25 23:57:50 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:57:51.862 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:57:51.869 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:57:51 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:57:51.870 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-25 23:57:51 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:58:15.268 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:58:15.277 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-25 23:58:15 | 耗时 4 ms | SQL 语句：
INSERT INTO building_info ( name, address, street, community, usage_area, surface_area, type, rooms, units, layers, images, create_date ) VALUES ( '一座三梯', '11111111', '0000000000', '金河苑', 8000, 8000, 3, 64, 4, 16, 'SA1682438294236.jpg', '2023-04-25 23:58:15' );
2023-04-25 23:58:15.344 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:58:15.375 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:58:15 | 耗时 27 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-25 23:58:15.380 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-25 23:58:15 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-25 23:58:19.161 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:58:19.174 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 8 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-25 23:58:19.175 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-25 23:58:19.177 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:58:19.181 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-25 23:58:19.183 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-25 23:58:19.186 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-25 23:58:19.188 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 8 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-25 23:58:19.191 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-25 23:58:19.196 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 3 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-25 23:58:19.198 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-25 23:58:19.208 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 6 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-25 23:58:19.210 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-25 23:58:19.214 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-25 23:58:19.215 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-25 23:58:19 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
