2023-04-30 10:31:10.080 febs [main] INFO  cc.mrbird.febs.FebsApplication - Starting FebsApplication on DESKTOP-ITVOUJ5 with PID 16676 (started by DELL in E:\Project\小区物业管理系统\backend)
2023-04-30 10:31:10.084 febs [main] INFO  cc.mrbird.febs.FebsApplication - No active profile set, falling back to default profiles: default
2023-04-30 10:31:13.514 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-04-30 10:31:13.517 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-04-30 10:31:13.617 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85ms. Found 0 repository interfaces.
2023-04-30 10:31:14.201 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$9571779e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:14.364 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:14.478 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6fc0c342] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:14.485 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:14.487 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:14.497 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6325271] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:14.512 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$71b2541a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:14.897 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$6a770b6e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.011 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.016 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.136 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.145 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$57b9ae80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.149 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.155 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$43fabf0b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.171 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.175 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.180 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-04-30 10:31:15.198 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-04-30 10:31:15.629 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-04-30 10:31:15.629 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-04-30 10:31:15.629 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-04-30 10:31:15.629 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-04-30 10:31:15.629 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.645 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:15.655 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.103 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.118 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.121 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.127 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.171 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.172 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.183 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.185 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy112] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.186 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.248 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.283 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.329 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.332 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.337 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.376 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.378 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.425 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.428 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.435 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.471 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.472 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.475 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'ownerInfoServiceImpl' of type [cc.mrbird.febs.cos.service.impl.OwnerInfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.502 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.531 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$61c5d202] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.536 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$1412941b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.543 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$cf297a0a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.561 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.569 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.581 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$f5f4f138] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.591 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.598 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$43d16f91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.612 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.615 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.622 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.628 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.671 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.694 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.701 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.701 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.713 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:17.734 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-04-30 10:31:18.302 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-04-30 10:31:18.322 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-04-30 10:31:18.330 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-04-30 10:31:18.331 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-04-30 10:31:18.339 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [F:\jdk\jdk8\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;F:\SQL\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;F:\Git\Git\cmd;F:\mongoDB\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin\bin;F:\Xshell\;%MAVEN_HOME%\bin;D:\Java_tool\maven\maven_work\apache-maven-3.8.1-bin\apache-maven-3.8.1\bin;F:\node;F:\node\node_global;C:\Program Files\dotnet\;F:\xftp\xftp7\;F:\node\;C:\Program Files(x86)\Tencent\微信开发者工具\dll;F:\python\python31\Scripts\;F:\python\python31\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;F:\VS code\Microsoft VS Code\bin;E:\Developer\nodejs\npm_global;F:\MySQL\mysql-8.0.23-winx64\bin;C:\Users\DELL\AppData\Roaming\npm;.]
2023-04-30 10:31:18.536 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-04-30 10:31:18.537 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 8364 ms
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-04-30 10:31:19.434 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-04-30 10:31:20.392 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-04-30 10:31:20.417 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-04-30 10:31:20.418 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-04-30 10:31:20.426 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-04-30 10:31:20.430 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-04-30 10:31:20.431 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'DESKTOP-ITVOUJ51682821880397'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-04-30 10:31:20.431 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-04-30 10:31:20.432 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-04-30 10:31:20.434 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1426370c
2023-04-30 10:31:20.528 febs [main] INFO  p6spy - 2023-04-30 10:31:20 | 耗时 6 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-04-30 10:31:21.276 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-04-30 10:31:23.069 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-04-30 10:31:23.141 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-04-30 10:31:23.241 febs [main] INFO  o.s.s.quartz.SchedulerFactoryBean - Will start Quartz Scheduler [MyScheduler] in 1 seconds
2023-04-30 10:31:23.262 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-04-30 10:31:23.313 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 10:31:23.331 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-04-30 10:31:23.369 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-04-30 10:31:23.373 febs [main] INFO  cc.mrbird.febs.FebsApplication - Started FebsApplication in 14.385 seconds (JVM running for 16.22)
2023-04-30 10:31:23.392 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-04-30 10:31:23.395 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-04-30 10:31:23.395 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-04-30 10:31:23.463 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 5 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-04-30 10:31:23.481 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 10 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:31:23.620 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 2 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-04-30 10:31:23.656 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 8 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-04-30 10:31:23.686 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 3 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-04-30 10:31:23.698 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:31:23.704 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-04-30 10:31:23.712 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 4 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-04-30 10:31:23.718 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-04-30 10:31:23.722 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:31:23.730 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-04-30 10:31:23.735 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-04-30 10:31:23.741 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-04-30 10:31:23.748 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:31:23.755 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-04-30 10:31:23.762 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-04-30 10:31:23.765 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-04-30 10:31:23.770 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:31:23.773 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank';
2023-04-30 10:31:23.778 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'fank' and m.perms is not null and m.perms <> '';
2023-04-30 10:31:23.780 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='14' ;
2023-04-30 10:31:23.784 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'sungou' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:31:23.786 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'sungou';
2023-04-30 10:31:23.790 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'sungou' and m.perms is not null and m.perms <> '';
2023-04-30 10:31:23.793 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='15' ;
2023-04-30 10:31:23.796 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:31:23.799 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油';
2023-04-30 10:31:23.802 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-30 10:31:23.804 febs [main] INFO  p6spy - 2023-04-30 10:31:23 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-04-30 10:31:23.805 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-04-30 10:31:23.806 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-04-30 10:31:23.806 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-04-30 10:31:23.806 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-04-30 10:31:23.806 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - FEBS 启动完毕，时间：2023-04-30T10:31:23.806
2023-04-30 10:31:24.234 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-04-30 10:31:24.235 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-04-30 10:31:24.236 febs [RMI TCP Connection(3)-192.168.56.1] INFO  p6spy - 2023-04-30 10:31:24 | 耗时 1 ms | SQL 语句：
/* ping */ SELECT 1;
2023-04-30 10:31:24.254 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.SchedulerFactoryBean - Starting Quartz Scheduler now, after delay of 1 seconds
2023-04-30 10:31:24.255 febs [RMI TCP Connection(4)-192.168.56.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 20 ms
2023-04-30 10:31:24.266 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: detected 1 failed or restarted instances.
2023-04-30 10:31:24.266 febs [Quartz Scheduler [MyScheduler]] INFO  o.s.s.quartz.LocalDataSourceJobStore - ClusterManager: Scanning for instance "DESKTOP-ITVOUJ51682592617171"'s failed in-progress jobs.
2023-04-30 10:31:24.277 febs [Quartz Scheduler [MyScheduler]] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_DESKTOP-ITVOUJ51682821880397 started.
2023-04-30 10:49:40.261 febs [http-nio-9527-exec-2] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 10:49:40.515 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 10:49:40 | 耗时 8 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T10:49:40.451+0800' WHERE username = 'fank';
2023-04-30 10:49:40.524 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 10:49:40 | 耗时 6 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 10:49:40.567 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 10:49:40 | 耗时 7 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T10:49:40.545+0800', '', '127.0.0.1' );
2023-04-30 10:49:40.885 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 10:49:40.955 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 10:49:40 | 耗时 11 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 10:49:41.505 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 10:49:41.506 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 10:49:41.537 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 24 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 10:49:41.547 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 5 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 10:49:41.554 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 2 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 10:49:41.562 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 3 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 10:49:41.568 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 10:49:41.657 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 108 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 10:49:41.687 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 25 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 10:49:41.699 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 7 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 10:49:41.725 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 4 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 10:49:41.744 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 11 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 10:49:41.751 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 10:49:41.770 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 10:49:41.772 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 10:49:41 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 11:31:23.286 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 13:27:11.191 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 13:31:16.746 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 15:09:33.741 febs [http-nio-9527-exec-8] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 15:09:33.793 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 15:09:33 | 耗时 7 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T15:09:33.767+0800' WHERE username = 'fank';
2023-04-30 15:09:33.804 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 15:09:33 | 耗时 9 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 15:09:33.843 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 15:09:33 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T15:09:33.816+0800', '', '127.0.0.1' );
2023-04-30 15:09:33.882 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:09:33.889 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:09:33 | 耗时 3 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 15:09:34.052 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:09:34.052 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:09:34.071 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 5 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 15:09:34.071 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 6 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 15:09:34.072 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 15:09:34.076 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 15:09:34.076 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 4 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 15:09:34.080 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 2 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 15:09:34.080 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 15:09:34.084 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 15:09:34.086 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 15:09:34.094 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 15:09:34.097 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 15:09:34.101 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 15:09:34.103 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:09:34 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 15:09:57.308 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:09:57.476 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 15:09:57 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:09:57.485 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 15:09:57 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:14:27.374 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:14:27.400 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:14:27 | 耗时 4 ms | SQL 语句：
UPDATE building_info SET name='金河苑一座一梯', address='广东省广州市番禺区沙湾镇金沙湾花园', community='金河苑', usage_area=2958.2, surface_area=3399, type=2, rooms=24, units=4, layers=6, images='SA1647424830910.jpg,SA1647425946708.jpg' WHERE ID=1;
2023-04-30 15:14:27.471 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:14:27.479 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:14:27 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:14:27.480 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:14:27 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:15:22.434 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:15:22.458 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:15:22 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:15:22.461 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:15:22 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:16:27.298 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:16:27.305 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:16:27 | 耗时 3 ms | SQL 语句：
UPDATE building_info SET name='金河苑二座三梯', address='广东省广州市番禺区沙湾镇金沙湾花园', community='金河苑', usage_area=8008, surface_area=8005, type=2, rooms=24, units=4, layers=6 WHERE ID=5;
2023-04-30 15:16:27.370 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:16:27.377 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:16:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:16:27.378 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:16:27 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:16:33.334 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 15:17:29.696 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:17:29.702 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 15:17:29 | 耗时 3 ms | SQL 语句：
UPDATE building_info SET name='保安之家', address='篮球场旁', community='金河苑', usage_area=2001, surface_area=2000, type=1, rooms=40, units=10, layers=10 WHERE ID=3;
2023-04-30 15:17:29.766 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:17:29.771 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:17:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:17:29.772 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:17:29 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:18:26.030 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:18:26.037 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:18:26 | 耗时 3 ms | SQL 语句：
UPDATE building_info SET name='金景苑一座一梯', address='广东省广州市番禺区沙湾镇金沙湾花园', community='金景苑', usage_area=2000, surface_area=2000, type=3, rooms=64, units=4, layers=16, images='SA1682438151130.jpg' WHERE ID=7;
2023-04-30 15:18:26.108 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:18:26.112 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:18:26 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:18:26.114 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:18:26 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:18:53.747 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:18:53.757 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 15:18:53 | 耗时 4 ms | SQL 语句：
UPDATE building_info SET name='金景苑一座二梯', address='广东省广州市番禺区沙湾镇金沙湾花园', community='金景苑', usage_area=10000, surface_area=10000, type=3, rooms=64, units=4, layers=16, images='SA1682438222349.jpg' WHERE ID=8;
2023-04-30 15:18:53.829 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:18:53.833 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:18:53 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:18:53.835 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:18:53 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:19:28.712 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:19:28.721 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:19:28 | 耗时 3 ms | SQL 语句：
UPDATE building_info SET name='金河苑二座四梯', address='广东省广州市番禺区沙湾镇金沙湾花园', community='金河苑', usage_area=10000, surface_area=10020, type=2, rooms=24, units=4, layers=6 WHERE ID=4;
2023-04-30 15:19:28.786 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:19:28.792 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:19:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 15:19:28.794 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 15:19:28 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 15:19:34.646 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:19:34.648 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:19:34.657 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 15:19:34 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 15:19:34.659 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:19:34.660 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:19:34.672 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 15:19:34 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 15:19:34.718 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 15:19:34 | 耗时 3 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 15:19:34.718 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:19:34 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 15:19:34.720 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:19:34 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 15:31:10.201 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 15:57:16.871 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:57:16.888 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 15:57:16 | 耗时 5 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='602', floor=6, usage_area=172.54, surface_area=181.71, nature=1, rooms=4, buyer='黄荍', staff_id=3, owner_id=4 WHERE ID=1;
2023-04-30 15:57:16.951 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:57:16.957 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 15:57:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 15:57:16.959 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 15:57:16 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 15:58:04.426 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:58:04.433 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:58:04 | 耗时 3 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯601', building_id=1, number='601', floor=6, usage_area=254.68, surface_area=275.31, nature=1, rooms=5, buyer='黄荍', staff_id=3, owner_id=4 WHERE ID=2;
2023-04-30 15:58:04.503 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:58:04.509 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 15:58:04 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 15:58:04.511 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 15:58:04 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 15:58:43.172 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:58:43.180 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 15:58:43 | 耗时 4 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯603', building_id=1, number='603', floor=6, usage_area=166.5, surface_area=173.2, nature=1, rooms=4, buyer='周迅', staff_id=3, owner_id=2 WHERE ID=3;
2023-04-30 15:58:43.262 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:58:43.269 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 15:58:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 15:58:43.271 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 15:58:43 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 15:59:49.491 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:59:49.498 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 15:59:49 | 耗时 3 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='604', floor=6, usage_area=156, surface_area=160, nature=1, rooms=4, buyer='乔', staff_id=3, owner_id=1 WHERE ID=4;
2023-04-30 15:59:49.569 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:59:49.573 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 15:59:49 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 15:59:49.574 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 15:59:49 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 15:59:58.481 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:59:58.485 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 15:59:58 | 耗时 0 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='604', floor=6, usage_area=156, surface_area=160, nature=1, rooms=4, buyer='乔', staff_id=3, owner_id=1 WHERE ID=4;
2023-04-30 15:59:58.555 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 15:59:58.561 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 15:59:58 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 15:59:58.563 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 15:59:58 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 16:00:06.408 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:00:06.415 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 16:00:06 | 耗时 3 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='604', floor=6, usage_area=156, surface_area=160, nature=1, rooms=4, buyer='乔乔', staff_id=3, owner_id=1 WHERE ID=4;
2023-04-30 16:00:06.483 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:00:06.488 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:00:06 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 16:00:06.490 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:00:06 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 16:05:37.404 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:37.415 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:05:37 | 耗时 4 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='604', floor=6, usage_area=156, surface_area=160, nature=2, rooms=4, buyer='乔乔', staff_id=3, owner_id=1 WHERE ID=4;
2023-04-30 16:05:37.544 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:37.559 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:05:37 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 16:05:37.561 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:05:37 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 16:05:38.239 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:38.241 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:38.242 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:38.253 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:05:38 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:05:38.257 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 16:05:38 | 耗时 4 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:05:38.273 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:05:38 | 耗时 5 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:05:43.465 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:43.475 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:05:43 | 耗时 3 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='604', floor=6, usage_area=156, surface_area=160, nature=1, rooms=4, buyer='乔乔', staff_id=3, owner_id=1 WHERE ID=4;
2023-04-30 16:05:43.564 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:43.569 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:05:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 16:05:43.571 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:05:43 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 16:05:57.352 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:57.357 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:57.357 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:05:57.358 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 16:05:57 | 耗时 3 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:05:57.360 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:05:57 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:05:57.363 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:05:57 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:07:03.289 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:07:03.290 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:07:03.290 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:07:03.290 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:07:03.312 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 16:07:03 | 耗时 4 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:07:03.319 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:07:03 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 16:07:03.321 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:07:03 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 16:07:03.325 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 16:07:03 | 耗时 4 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:07:03.328 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:07:03 | 耗时 6 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:11:28.266 febs [http-nio-9527-exec-3] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 16:11:28.303 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T16:11:28.289+0800' WHERE username = 'fank';
2023-04-30 16:11:28.310 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 5 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 16:11:28.362 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T16:11:28.319+0800', '', '127.0.0.1' );
2023-04-30 16:11:28.403 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:28.417 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 7 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 16:11:28.593 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:28.596 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:28.606 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 8 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 16:11:28.608 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 4 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 16:11:28.610 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 16:11:28.610 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 16:11:28.613 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 16:11:28.613 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 16:11:28.614 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 16:11:28.617 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 16:11:28.618 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 16:11:28.626 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 3 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 16:11:28.629 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 16:11:28.632 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 16:11:28.635 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:28 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 16:11:31.118 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:31.125 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 16:11:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 16:11:31.126 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 16:11:31 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 16:11:38.910 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:38.911 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:38.912 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:38.914 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:11:38.920 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 16:11:38 | 耗时 4 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:11:38.923 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:11:38 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:11:38.925 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 16:11:38 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:11:38.926 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 16:11:38.929 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 16:11:38 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 16:12:21.157 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:12:21.157 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:12:21.158 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:12:21.160 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:12:21 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:12:21.162 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 16:12:21 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:12:21.164 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:12:21 | 耗时 3 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:12:29.373 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:12:29.373 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:12:29.375 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:12:29.377 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:12:29 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:12:29.377 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:12:29 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:12:29.377 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:12:29.382 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:12:29 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:12:29.387 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 16:12:29 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 16:12:29.391 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 16:12:29 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 16:14:13.019 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:14:13.020 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:14:13.021 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:14:13.023 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:14:13 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:14:13.024 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 16:14:13 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:14:13.038 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 16:14:13 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:18:25.578 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:18:25.578 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:18:25.578 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 16:18:25.582 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 16:18:25 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 16:18:25.582 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 16:18:25 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 16:18:25.584 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 16:18:25 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 16:37:49.540 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 17:14:27.222 febs [http-nio-9527-exec-3] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 17:14:27.305 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 7 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T17:14:27.263+0800' WHERE username = 'fank';
2023-04-30 17:14:27.318 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 9 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 17:14:27.392 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 4 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T17:14:27.332+0800', '', '127.0.0.1' );
2023-04-30 17:14:27.467 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:14:27.481 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 5 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 17:14:27.673 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:14:27.677 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:14:27.700 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 17 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 17:14:27.710 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 5 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 17:14:27.710 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 5 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 17:14:27.717 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 17:14:27.722 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 17:14:27.724 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 10 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 17:14:27.732 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 17:14:27.734 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 17:14:27.740 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 2 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 17:14:27.768 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 5 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 17:14:27.776 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 17:14:27.785 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 17:14:27.789 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:14:27 | 耗时 1 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 17:14:31.337 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:14:31.436 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 17:14:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:14:31.441 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 17:14:31 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:14:48.458 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:14:48.476 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 17:14:48 | 耗时 4 ms | SQL 语句：
UPDATE owner_info SET name='蛋蛋', phone='13265003297', id_number='440902200012081224' WHERE ID=5;
2023-04-30 17:14:48.514 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:14:48.523 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:14:48 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:14:48.526 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:14:48 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:16:48.245 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:16:48.469 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:16:48 | 耗时 8 ms | SQL 语句：
INSERT INTO owner_info ( name, phone, id_number, create_date ) VALUES ( '万富荍', '18812698745', '440902200012081225', '2023-04-30 17:16:48' );
2023-04-30 17:16:48.516 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:16:48.524 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:16:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:16:48.527 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:16:48 | 耗时 1 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:19:49.884 febs [http-nio-9527-exec-4] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-04-30 17:19:51.087 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 17:19:51 | 耗时 3 ms | SQL 语句：
UPDATE owner_info SET images='SA1682846391023.jpg' WHERE ID = 6;
2023-04-30 17:19:51.124 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:19:51.129 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:19:51 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:19:51.131 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:19:51 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:21:57.798 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:21:57.810 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:21:57 | 耗时 4 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 6;
2023-04-30 17:31:10.223 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 17:50:24.145 febs [http-nio-9527-exec-6] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-04-30 17:51:13.770 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:51:13 | 耗时 6 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '万富QQ';
2023-04-30 17:51:13.842 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:51:13 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '万富QQ';
2023-04-30 17:51:59.883 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 3 ms | SQL 语句：
INSERT INTO t_user ( username, password, status, create_time, ssex, description, avatar ) VALUES ( '万富QQ', '4de9e872d6ce1dd881948b9e6432e0eb', '1', '2023-04-30T17:51:59.860+0800', '2', '注册用户', 'default.jpg' );
2023-04-30 17:51:59.905 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 3 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE name = '万富荍';
2023-04-30 17:51:59.920 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 1 ms | SQL 语句：
UPDATE owner_info SET user_id=17 WHERE ID = 6;
2023-04-30 17:51:59.931 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 5 ms | SQL 语句：
INSERT INTO t_user_role ( user_id, role_id ) VALUES ( 17, 75 );
2023-04-30 17:51:59.945 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 3 ms | SQL 语句：
INSERT INTO t_user_config ( USER_ID, theme, layout, multi_page, fix_siderbar, fix_header, color ) VALUES ( 17, 'light', 'head', '0', '1', '1', 'rgb(66, 185, 131)' );
2023-04-30 17:51:59.952 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 5 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '万富QQ' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 17:51:59.975 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '万富QQ';
2023-04-30 17:51:59.987 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 4 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '万富QQ' and m.perms is not null and m.perms <> '';
2023-04-30 17:51:59.990 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:51:59 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='17' ;
2023-04-30 17:52:16.245 febs [http-nio-9527-exec-1] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 17:52:16.263 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T17:52:16.257+0800' WHERE username = 'fank';
2023-04-30 17:52:16.265 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 17:52:16.327 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 4 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T17:52:16.273+0800', '', '127.0.0.1' );
2023-04-30 17:52:16.384 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:52:16.391 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 17:52:16.630 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:52:16.641 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:52:16.648 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 10 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 17:52:16.654 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 5 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 17:52:16.655 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 4 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 17:52:16.657 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 17:52:16.659 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 17:52:16.662 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 17:52:16.662 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 5 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 17:52:16.665 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 17:52:16.671 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 5 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 17:52:16.682 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 4 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 17:52:16.688 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 17:52:16.695 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 17:52:16.699 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:52:16 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 17:52:25.690 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:52:25.723 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:52:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:52:25.728 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:52:25 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:52:53.616 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:52:53.627 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 17:52:53 | 耗时 4 ms | SQL 语句：
INSERT INTO owner_info ( name, phone, id_number, create_date ) VALUES ( '亿富荍', '18812698745', '440902200012081228', '2023-04-30 17:52:53' );
2023-04-30 17:52:53.664 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:52:53.671 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 17:52:53 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:52:53.673 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 17:52:53 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:52:59.776 febs [http-nio-9527-exec-7] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-04-30 17:53:00.911 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 17:53:00 | 耗时 3 ms | SQL 语句：
UPDATE owner_info SET images='SA1682848380885.jpg' WHERE ID = 7;
2023-04-30 17:53:00.947 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:53:00.974 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:53:00 | 耗时 20 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:53:00.981 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 17:53:00 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:58:13.297 febs [http-nio-9527-exec-6] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 17:58:13.301 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T17:58:13.298+0800' WHERE username = 'fank';
2023-04-30 17:58:13.303 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 17:58:13.313 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T17:58:13.307+0800', '', '127.0.0.1' );
2023-04-30 17:58:13.334 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:58:13.340 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 4 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 17:58:13.481 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:58:13.487 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 17:58:13.488 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:58:13.489 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 17:58:13.491 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 17:58:13.498 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 17:58:13.498 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 4 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 17:58:13.500 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 17:58:13.500 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 1 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 17:58:13.500 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 17:58:13.502 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 17:58:13.502 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 17:58:13.505 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 17:58:13.505 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 17:58:13.508 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 17:58:13 | 耗时 1 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 17:58:21.772 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:58:21.779 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:58:21 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 17:58:21.781 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:58:21 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 17:58:27.597 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:58:27.602 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 17:58:27 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 7;
2023-04-30 17:58:35.186 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:58:35.188 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 17:58:35 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 5;
2023-04-30 17:58:39.769 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 17:58:39.773 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 17:58:39 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 3;
2023-04-30 18:00:13.169 febs [http-nio-9527-exec-3] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-04-30 18:00:17.702 febs [http-nio-9527-exec-1] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-04-30 18:00:31.685 febs [http-nio-9527-exec-6] INFO  com.baidu.aip.client.BaseClient - get access_token success. current state: STATE_AIP_AUTH_OK
2023-04-30 18:31:10.243 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 19:31:10.205 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 19:33:15.569 febs [http-nio-9527-exec-7] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 19:33:15.658 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:33:15 | 耗时 6 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T19:33:15.618+0800' WHERE username = '荍荍加油';
2023-04-30 19:33:15.680 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:33:15 | 耗时 18 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 19:33:15.758 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:33:15 | 耗时 3 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-30T19:33:15.696+0800', '', '127.0.0.1' );
2023-04-30 19:33:15.808 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:33:15 | 耗时 3 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-30 19:33:15.871 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:33:15.884 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:33:15 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-30 19:33:16.124 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:33:16.130 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:33:16.144 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 8 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:33:16.147 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:33:16.149 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:33:16.151 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:33:16.155 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-30 19:33:16.201 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 2 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-30 19:33:16.215 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-30 19:33:16.229 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 9 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-30 19:33:16.235 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 2 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:33:16.248 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:33:16 | 耗时 9 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-30 19:34:04.553 febs [http-nio-9527-exec-8] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 19:34:04.560 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T19:34:04.556+0800' WHERE username = 'fank';
2023-04-30 19:34:04.562 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 19:34:04.571 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T19:34:04.565+0800', '', '127.0.0.1' );
2023-04-30 19:34:04.607 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:34:04.611 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 19:34:04.766 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:34:04.774 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:34:04.778 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 6 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 19:34:04.786 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 19:34:04.796 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:34:04.796 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 3 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 19:34:04.797 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:34:04.798 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:34:04.800 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:34:04.802 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:34:04.805 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 19:34:04.807 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 7 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 19:34:04.810 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 19:34:04.815 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 19:34:04.817 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:34:04 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 19:38:51.246 febs [http-nio-9527-exec-1] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 19:38:51.250 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T19:38:51.249+0800' WHERE username = '荍荍加油';
2023-04-30 19:38:51.252 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 19:38:51.260 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-30T19:38:51.257+0800', '', '127.0.0.1' );
2023-04-30 19:38:51.269 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-30 19:38:51.284 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:38:51.288 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-30 19:38:51.382 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:38:51.383 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:38:51.386 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-30 19:38:51.389 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:38:51.389 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-30 19:38:51.391 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:38:51.392 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-30 19:38:51.393 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:38:51.393 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:38:51.396 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:38:51.396 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-30 19:38:51.399 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:38:51 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-30 19:39:02.781 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:02.782 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:02.787 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:39:02 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-04-30 19:39:02.796 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:39:02 | 耗时 3 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-04-30 19:39:03.774 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:03.776 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:03.779 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-30 19:39:03.781 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:39:03.781 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-30 19:39:03.782 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:03.783 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:03.785 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:39:03.785 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 3 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-30 19:39:03.786 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-30 19:39:03.787 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:39:03.790 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:39:03 | 耗时 2 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-30 19:39:05.788 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:05.788 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:05.792 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:39:05 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-04-30 19:39:05.794 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:39:05 | 耗时 3 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-04-30 19:39:07.088 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:07.089 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:07.092 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-30 19:39:07.094 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-30 19:39:07.094 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:39:07.097 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:07.097 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-30 19:39:07.098 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:39:07.098 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:07.100 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:39:07.100 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-30 19:39:07.102 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:39:07 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-30 19:39:08.801 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:08.802 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:08.804 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:39:08 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-04-30 19:39:08.804 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 19:39:08 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-04-30 19:39:09.801 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:09.805 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:39:09 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-30 19:39:09.807 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:09.808 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:39:09 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-30 19:39:09.810 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:39:09 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:39:09.810 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:39:09 | 耗时 1 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-30 19:39:10.006 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:39:10 | 耗时 194 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:39:10.010 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:39:10 | 耗时 3 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:10.012 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:39:10 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:10.013 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:39:10 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-30 19:39:10.014 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:39:10 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:39:10.017 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:39:10 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-30 19:39:12.238 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:12.238 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:12.243 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:39:12 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage, ri.id AS repairId, ri.repair_status AS repairStatus FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) LEFT JOIN repair_info ri ON (ri.houses_id = hi.id) AND ri.repair_status != 2 WHERE 1 = 1 AND oi.user_id = 16;
2023-04-30 19:39:12.245 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:39:12 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 2;
2023-04-30 19:39:14.006 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:14.006 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:39:14.011 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-30 19:39:14.012 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:39:14.015 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:14.015 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-30 19:39:14.017 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:39:14.017 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-30 19:39:14.019 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:39:14.019 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:39:14.021 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-30 19:39:14.021 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:39:14 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-30 19:44:38.751 febs [http-nio-9527-exec-7] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 19:44:38.757 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T19:44:38.753+0800' WHERE username = 'fank';
2023-04-30 19:44:38.760 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 19:44:38.772 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T19:44:38.764+0800', '', '127.0.0.1' );
2023-04-30 19:44:38.798 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:38.803 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 19:44:38.949 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:38.953 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 19:44:38.954 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:38.958 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 19:44:38.961 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 19:44:38.962 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:44:38.966 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:44:38.966 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:44:38.969 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:44:38.971 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 19:44:38.972 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:44:38.975 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 19:44:38.977 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 19:44:38.981 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 19:44:38.983 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:38 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 19:44:41.815 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:41.817 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:41.818 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:41.819 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:41.821 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:44:41 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 19:44:41.822 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:44:41 | 耗时 1 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 19:44:41.827 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:44:41 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 19:44:41.843 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:44:41 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 19:44:41.846 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:44:41 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 19:44:59.177 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:59.184 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:44:59 | 耗时 1 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='602', floor=6, usage_area=172.54, surface_area=181.71, nature=1, rooms=4, buyer='黄荍', staff_id=3, owner_id=4 WHERE ID=1;
2023-04-30 19:44:59.258 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:44:59.262 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:44:59 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 19:44:59.265 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:44:59 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 19:45:04.036 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:04.045 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:45:04 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 19:45:04.047 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:45:04 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 19:45:14.298 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:14.301 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:45:14 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 3;
2023-04-30 19:45:17.932 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:17.936 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:45:17 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 4;
2023-04-30 19:45:34.653 febs [http-nio-9527-exec-4] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 19:45:34.659 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T19:45:34.654+0800' WHERE username = 'fank';
2023-04-30 19:45:34.661 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 19:45:34.672 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T19:45:34.665+0800', '', '127.0.0.1' );
2023-04-30 19:45:34.694 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:34.699 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 19:45:34.841 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:34.842 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:34.847 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 3 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 19:45:34.848 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:45:34.850 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 19:45:34.850 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:45:34.852 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 19:45:34.853 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:45:34.855 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:45:34.856 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:45:34.859 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 19:45:34.863 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 3 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 19:45:34.867 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 19:45:34.871 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 19:45:34.873 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:34 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 19:45:39.731 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:39.731 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:39.733 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:39.734 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:39.738 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:45:39 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 19:45:39.743 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:45:39 | 耗时 3 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 19:45:39.745 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:45:39 | 耗时 1 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 19:45:39.757 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:45:39 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 19:45:39.760 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:45:39 | 耗时 2 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 19:45:47.140 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:47.151 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:45:47 | 耗时 5 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯602', building_id=1, number='602', floor=6, usage_area=172.54, surface_area=181.71, nature=1, rooms=4, buyer='黄荍', staff_id=3, owner_id=3 WHERE ID=1;
2023-04-30 19:45:47.221 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:47.226 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:45:47 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 19:45:47.229 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:45:47 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 19:45:54.696 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:54.704 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:45:54 | 耗时 3 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯601', building_id=1, number='601', floor=6, usage_area=254.68, surface_area=275.31, nature=1, rooms=5, buyer='黄荍', staff_id=3, owner_id=3 WHERE ID=2;
2023-04-30 19:45:54.774 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:45:54.780 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:45:54 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 19:45:54.781 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:45:54 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 19:46:01.785 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:01.790 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:46:01 | 耗时 1 ms | SQL 语句：
UPDATE houses_info SET address='广东省广州市番禺区沙湾镇金沙湾花园金河苑一座一梯601', building_id=1, number='601', floor=6, usage_area=254.68, surface_area=275.31, nature=1, rooms=5, buyer='黄荍', staff_id=3, owner_id=3 WHERE ID=2;
2023-04-30 19:46:01.870 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:01.875 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:46:01 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 19:46:01.877 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:46:01 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 19:46:05.864 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:05.866 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:05.866 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:05.867 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:05.868 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 19:46:05 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 19:46:05.873 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:46:05 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 19:46:05.873 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 19:46:05 | 耗时 1 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 19:46:05.873 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:46:05 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 19:46:05.877 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 19:46:05 | 耗时 2 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 19:46:08.893 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:08.899 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:46:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT(hi.owner_id) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON (tu.USER_ID = oi.user_id) LEFT JOIN houses_info hi ON (hi.owner_id = oi.id) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC ) TOTAL;
2023-04-30 19:46:08.900 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:46:08 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.name, oi.phone, oi.images, oi.id_number AS idNumber, oi.create_date AS createDate, oi.user_id AS userId, tu.USERNAME AS account, tu.LAST_LOGIN_TIME AS lastTime, COUNT( hi.owner_id ) AS housesNum FROM owner_info oi LEFT JOIN t_user tu ON ( tu.USER_ID = oi.user_id ) LEFT JOIN houses_info hi ON ( hi.owner_id = oi.id ) WHERE 1 = 1 GROUP BY oi.id ORDER BY OI.create_date DESC LIMIT 0,10;
2023-04-30 19:46:14.754 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:14.757 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 19:46:14 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 3;
2023-04-30 19:46:21.459 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:21.462 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:46:21 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, bi.images FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) WHERE 1 = 1 AND hi.owner_id = 4;
2023-04-30 19:46:30.455 febs [http-nio-9527-exec-8] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 19:46:30.463 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T19:46:30.457+0800' WHERE username = '荍荍加油';
2023-04-30 19:46:30.468 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '荍荍加油' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 19:46:30.479 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( '荍荍加油', '2023-04-30T19:46:30.474+0800', '', '127.0.0.1' );
2023-04-30 19:46:30.491 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = '荍荍加油' and m.perms is not null and m.perms <> '';
2023-04-30 19:46:30.504 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:30.508 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = '荍荍加油') order by m.order_num;
2023-04-30 19:46:30.650 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:30.651 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 19:46:30.657 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info WHERE user_id = 16;
2023-04-30 19:46:30.657 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 19:46:30.661 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:46:30.661 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info WHERE owner_id = 3;
2023-04-30 19:46:30.664 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 19:46:30.664 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 2 ms | SQL 语句：
SELECT on2.allPrice - on1.paid AS unpaid, on3.*, on4.* FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS paid FROM payment_manage pm, payment_record pr, houses_info hi WHERE hi.owner_id = 3 and pr.payment_id = pm.id and hi.id = pm.houses_id) AS on1, (SELECT SUM( pm.price ) AS allPrice FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3) AS on2, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS electricity FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 1) AS on3, (SELECT IFNULL(SUM( pm.dosage ) ,0) AS water FROM payment_manage pm LEFT JOIN houses_info hi ON (hi.id = pm.houses_id) WHERE hi.owner_id = 3 AND pm.type = 2) AS on4;
2023-04-30 19:46:30.666 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 19:46:30.667 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 19:46:30.669 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
SELECT DATE_FORMAT( ANY_VALUE(spo.days), '%m-%d' ) AS days, IFNULL(ANY_VALUE(er.temperature),0) AS temperature FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY )) spo LEFT JOIN epidemic_register er ON ( DATE_FORMAT( er.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days ORDER BY days ASC;
2023-04-30 19:46:30.669 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 19:46:30 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = '荍荍加油' group by days;
2023-04-30 21:10:13.554 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 21:31:02.478 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 22:23:36.220 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 22:23:36 | 耗时 6 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '万富QQ';
2023-04-30 22:23:37.094 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 22:23:37 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = '万富QQ';
2023-04-30 22:31:02.485 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 23:23:10.791 febs [http-nio-9527-exec-2] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-04-30 23:23:10.967 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 23:23:10 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-04-30T23:23:10.910+0800' WHERE username = 'fank';
2023-04-30 23:23:10.979 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 23:23:10 | 耗时 7 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'fank' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-04-30 23:23:11.057 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'fank', '2023-04-30T23:23:10.994+0800', '', '127.0.0.1' );
2023-04-30 23:23:11.161 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:23:11.183 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 5 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'fank') order by m.order_num;
2023-04-30 23:23:11.510 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:23:11.516 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:23:11.539 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 8 ms | SQL 语句：
SELECT COUNT( 1 ) FROM owner_info;
2023-04-30 23:23:11.539 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 6 ms | SQL 语句：
select count(1) from t_login_log;
2023-04-30 23:23:11.543 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 2 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-04-30 23:23:11.544 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 2 ms | SQL 语句：
SELECT COUNT( 1 ) FROM houses_info;
2023-04-30 23:23:11.546 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-04-30 23:23:11.548 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-04-30 23:23:11.551 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'fank' group by days;
2023-04-30 23:23:11.553 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 7 ms | SQL 语句：
SELECT * FROM ( SELECT IFNULL(SUM( pm.price ), 0) AS received FROM payment_manage pm ) AS on1, ( SELECT IFNULL(SUM( pm.price ),0) AS advance FROM payment_manage pm, payment_record pr WHERE pr.payment_id = pm.id ) AS on2;
2023-04-30 23:23:11.562 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 4 ms | SQL 语句：
SELECT ID,title,content,date,images,publisher FROM bulletin_info;
2023-04-30 23:23:11.570 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 5 ms | SQL 语句：
SELECT * FROM (SELECT IFNULL(SUM( pm.price ) ,0) AS month1 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '1', '-', '01' ), '%Y-%m')) AS on1, (SELECT IFNULL(SUM( pm.price ) ,0) AS month2 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '2', '-', '01' ), '%Y-%m')) AS on2, (SELECT IFNULL(SUM( pm.price ) ,0) AS month3 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '3', '-', '01' ), '%Y-%m')) AS on3, (SELECT IFNULL(SUM( pm.price ) ,0) AS month4 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '4', '-', '01' ), '%Y-%m')) AS on12, (SELECT IFNULL(SUM( pm.price ) ,0) AS month5 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '5', '-', '01' ), '%Y-%m')) AS on4, (SELECT IFNULL(SUM( pm.price ) ,0) AS month6 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '6', '-', '01' ), '%Y-%m')) AS on5, (SELECT IFNULL(SUM( pm.price ) ,0) AS month7 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '7', '-', '01' ), '%Y-%m')) AS on6, (SELECT IFNULL(SUM( pm.price ) ,0) AS month8 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '8', '-', '01' ), '%Y-%m')) AS on7, (SELECT IFNULL(SUM( pm.price ) ,0) AS month9 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '9', '-', '01' ), '%Y-%m')) AS on8, (SELECT IFNULL(SUM( pm.price ) ,0) AS month10 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '10', '-', '01' ), '%Y-%m')) AS on9, (SELECT IFNULL(SUM( pm.price ) ,0) AS month11 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '11', '-', '01' ), '%Y-%m')) AS on10, (SELECT IFNULL(SUM( pm.price ) ,0) AS month12 FROM payment_manage pm WHERE DATE_FORMAT( concat( pm.`year`, '-', pm.`month`, '-', '01' ), '%Y-%m' ) = DATE_FORMAT(concat( DATE_FORMAT( NOW(), '%Y' ), '-', '12', '-', '01' ), '%Y-%m')) AS on11;
2023-04-30 23:23:11.573 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 0 ms | SQL 语句：
SELECT COUNT( 1 ) AS num, CASE nature WHEN 1 THEN '住宅楼房' WHEN 2 THEN '社区用处' END AS nature FROM houses_info hi GROUP BY hi.nature;
2023-04-30 23:23:11.578 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT( 1 ) FROM building_info;
2023-04-30 23:23:11.580 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:23:11 | 耗时 0 ms | SQL 语句：
select count(*) from building_info where type = 2;
2023-04-30 23:23:14.257 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:23:14.284 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 23:23:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:23:14.287 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 23:23:14 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:26:33.524 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:26:33.550 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 23:26:33 | 耗时 4 ms | SQL 语句：
INSERT INTO building_info ( name, address, street, community, usage_area, surface_area, type, rooms, units, layers, images, create_date ) VALUES ( '金景苑一座三梯', '广东省广州市番禺区沙湾镇金沙湾花园', '中华大道', '金景苑', 8000, 8100, 3, 64, 4, 16, 'SA1682868390736.jpg', '2023-04-30 23:26:33' );
2023-04-30 23:26:33.607 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:26:33.613 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:26:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:26:33.615 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:26:33 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:28:54.105 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:28:54.112 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 23:28:54 | 耗时 3 ms | SQL 语句：
INSERT INTO building_info ( name, address, street, community, usage_area, surface_area, type, rooms, units, layers, create_date ) VALUES ( '金景苑一座四梯', '广东省广州市番禺区沙湾镇金沙湾花园', '中华大道', '金景苑', 8000, 8100, 2, 64, 4, 16, '2023-04-30 23:28:54' );
2023-04-30 23:28:54.183 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:28:54.191 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 23:28:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:28:54.192 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 23:28:54 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:31:02.477 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-04-30 23:34:04.557 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:34:04.605 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 23:34:04 | 耗时 5 ms | SQL 语句：
DELETE FROM building_info WHERE ID IN ( 6 , 3 );
2023-04-30 23:34:04.670 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:34:04.676 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:34:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:34:04.679 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:34:04 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:45:01.599 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:45:01.681 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 23:45:01 | 耗时 22 ms | SQL 语句：
UPDATE building_info SET name='金河苑二座五梯', address='广东省广州市番禺区沙湾镇金沙湾花园金河苑二座五梯', community='金沙苑', usage_area=12124.7, surface_area=13140.2, type=2, rooms=24, units=20, layers=6, images='5d3b7745104112d185cb105c7023df69a3e4166ec1b1157598448391e45d6e6d (3).jpg' WHERE ID=2;
2023-04-30 23:45:01.762 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:45:01.806 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:45:01 | 耗时 24 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:45:01.813 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:45:01 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:46:38.412 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:46:38.420 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:46:38 | 耗时 4 ms | SQL 语句：
UPDATE building_info SET name='金河苑二座五梯', address='广东省广州市番禺区沙湾镇金沙湾花园金河苑二座五梯', community='金沙苑', usage_area=12124.7, surface_area=13140.2, type=2, rooms=24, units=20, layers=6, images='00eaa39532c263e12111cfa8ca334140afc9d5893f3da63443fbbabbabbd532f.jpg' WHERE ID=2;
2023-04-30 23:46:38.535 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:46:38.540 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 23:46:38 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:46:38.542 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 23:46:38 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:47:03.332 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:03.547 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 23:47:03 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM infrastructure_info ii WHERE 1 = 1;
2023-04-30 23:47:03.550 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 23:47:03 | 耗时 1 ms | SQL 语句：
SELECT ii.id, ii.infrastructure_name AS infrastructureName, ii.use_date AS useDate, ii.community, ii.brand FROM infrastructure_info ii WHERE 1 = 1 ORDER BY ii.use_date DESC LIMIT 0,10;
2023-04-30 23:47:06.176 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:06.187 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 23:47:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:47:06.189 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 23:47:06 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:47:08.127 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:08.128 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:08.139 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:08.142 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:08.174 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:47:08 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 23:47:08.178 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:47:08 | 耗时 0 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 23:47:08.181 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:47:08 | 耗时 3 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 23:47:08.183 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 23:47:08 | 耗时 5 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 23:47:08.187 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 23:47:08 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 23:47:16.208 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:16.217 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 23:47:16 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:47:16.220 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-04-30 23:47:16 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:47:50.337 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:50.338 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:50.339 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:50.341 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-04-30 23:47:50 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,id_number,images,user_id,create_date FROM owner_info;
2023-04-30 23:47:50.341 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:50.342 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 23:47:50 | 耗时 0 ms | SQL 语句：
SELECT ID,name,address,street,community,usage_area,surface_area,type,rooms,units,layers,images,create_date FROM building_info;
2023-04-30 23:47:50.346 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-04-30 23:47:50 | 耗时 0 ms | SQL 语句：
SELECT ID,name,phone,image,type,create_date FROM worker_info WHERE type = 1;
2023-04-30 23:47:50.350 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 23:47:50 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM houses_info hi LEFT JOIN building_info bi ON (bi.id = hi.building_id) LEFT JOIN owner_info oi ON (oi.id = hi.owner_id) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1;
2023-04-30 23:47:50.352 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-04-30 23:47:50 | 耗时 1 ms | SQL 语句：
SELECT hi.id, hi.address, hi.building_id AS buildingId, hi.number, hi.floor, hi.usage_area AS usageArea, hi.surface_area AS surfaceArea, hi.nature, hi.rooms, hi.staff_id AS staffId, hi.owner_id AS ownerId, hi.buyer, hi.create_date AS createDate, oi.name, oi.phone, oi.id_number AS idNumber, bi.name AS buildName, bi.address AS buildAddress, bi.street, bi.community, bi.usage_area AS buildUsageArea, bi.surface_area AS buildSurfaceArea, bi.type, bi.rooms AS buildRooms, bi.units, bi.layers, bi.images, wi.name AS workerName, wi.phone AS workerPhone, wi.image AS workerImage FROM houses_info hi LEFT JOIN building_info bi ON ( bi.id = hi.building_id ) LEFT JOIN owner_info oi ON ( oi.id = hi.owner_id ) LEFT JOIN worker_info wi ON (wi.id = hi.staff_id) WHERE 1 = 1 ORDER BY hi.create_date DESC LIMIT 0,10;
2023-04-30 23:47:53.020 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:47:53.027 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:47:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:47:53.028 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:47:53 | 耗时 1 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:55:09.746 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:55:09.757 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-04-30 23:55:09 | 耗时 5 ms | SQL 语句：
UPDATE building_info SET name='金河苑二座五梯', address='广东省广州市番禺区沙湾镇金沙湾花园金河苑二座五梯', street='小红门', community='金沙苑', usage_area=12124.7, surface_area=13140.2, type=2, rooms=24, units=20, layers=6, images='00eaa39532c263e12111cfa8ca334140afc9d5893f3da63443fbbabbabbd532f.jpg,3baa89988dd5587c39798762bc539ea425c71c337809401c30f13e1b66f9f62c (10).jpg' WHERE ID=2;
2023-04-30 23:55:09.828 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:55:09.834 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 23:55:09 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:55:09.836 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-04-30 23:55:09 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:56:49.467 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:56:49.490 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-04-30 23:56:49 | 耗时 10 ms | SQL 语句：
INSERT INTO building_info ( name, address, street, community, usage_area, surface_area, type, rooms, units, layers, images, create_date ) VALUES ( '金景苑二座一梯', '广东省广州市番禺区沙湾镇金沙湾花园', '中华大道', '金景苑', 8000, 8100, 3, 64, 4, 16, 'SA1682870206593.jpg', '2023-04-30 23:56:49' );
2023-04-30 23:56:49.541 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:56:49.546 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 23:56:49 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:56:49.548 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-04-30 23:56:49 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
2023-04-30 23:59:17.826 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:59:17.836 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-04-30 23:59:17 | 耗时 6 ms | SQL 语句：
UPDATE building_info SET name='金景苑二座一梯', address='广东省广州市番禺区沙湾镇金沙湾花园', community='金景苑', usage_area=8000, surface_area=8100, type=3, rooms=64, units=4, layers=16, images='SA1682870206593.jpg,31abb8a4c9d968e7d1838728b883531706cfb38bef6734ad8ff1f3f35275a1e9 (5).jpg' WHERE ID=12;
2023-04-30 23:59:17.906 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-04-30 23:59:17.914 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:59:17 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM building_info bi WHERE 1 = 1;
2023-04-30 23:59:17.916 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-04-30 23:59:17 | 耗时 0 ms | SQL 语句：
SELECT bi.id, bi.name, bi.address, bi.street, bi.community, bi.usage_area AS usageArea, bi.surface_area AS surfaceArea, bi.type, bi.rooms, bi.units, bi.layers, bi.images, bi.create_date AS createDate FROM building_info bi WHERE 1 = 1 ORDER BY bi.create_date DESC LIMIT 0,10;
